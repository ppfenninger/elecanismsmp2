
encodertest.elf:     file format elf32-pic30

Disassembly of section .aivt._AltADC1Interrupt:

0000012e <.aivt._AltADC1Interrupt>:
 12e:	64 23 00    	nop       
Disassembly of section .aivt._AltAddressError:

00000108 <.aivt._AltAddressError>:
 108:	64 23 00    	nop       
Disassembly of section .aivt._AltCNInterrupt:

0000013a <.aivt._AltCNInterrupt>:
 13a:	64 23 00    	nop       
Disassembly of section .aivt._AltCRCInterrupt:

0000019a <.aivt._AltCRCInterrupt>:
 19a:	64 23 00    	nop       
Disassembly of section .aivt._AltCTMUInterrupt:

000001ae <.aivt._AltCTMUInterrupt>:
 1ae:	64 23 00    	nop       
Disassembly of section .aivt._AltCompInterrupt:

00000138 <.aivt._AltCompInterrupt>:
 138:	64 23 00    	nop       
Disassembly of section .aivt._AltIC1Interrupt:

00000116 <.aivt._AltIC1Interrupt>:
 116:	64 23 00    	nop       
Disassembly of section .aivt._AltIC2Interrupt:

0000011e <.aivt._AltIC2Interrupt>:
 11e:	64 23 00    	nop       
Disassembly of section .aivt._AltIC3Interrupt:

0000015e <.aivt._AltIC3Interrupt>:
 15e:	64 23 00    	nop       
Disassembly of section .aivt._AltIC4Interrupt:

00000160 <.aivt._AltIC4Interrupt>:
 160:	64 23 00    	nop       
Disassembly of section .aivt._AltIC5Interrupt:

00000162 <.aivt._AltIC5Interrupt>:
 162:	64 23 00    	nop       
Disassembly of section .aivt._AltIC6Interrupt:

00000164 <.aivt._AltIC6Interrupt>:
 164:	64 23 00    	nop       
Disassembly of section .aivt._AltIC7Interrupt:

00000140 <.aivt._AltIC7Interrupt>:
 140:	64 23 00    	nop       
Disassembly of section .aivt._AltIC8Interrupt:

00000142 <.aivt._AltIC8Interrupt>:
 142:	64 23 00    	nop       
Disassembly of section .aivt._AltIC9Interrupt:

000001ce <.aivt._AltIC9Interrupt>:
 1ce:	64 23 00    	nop       
Disassembly of section .aivt._AltINT0Interrupt:

00000114 <.aivt._AltINT0Interrupt>:
 114:	64 23 00    	nop       
Disassembly of section .aivt._AltINT1Interrupt:

0000013c <.aivt._AltINT1Interrupt>:
 13c:	64 23 00    	nop       
Disassembly of section .aivt._AltINT2Interrupt:

0000014e <.aivt._AltINT2Interrupt>:
 14e:	64 23 00    	nop       
Disassembly of section .aivt._AltINT3Interrupt:

0000017e <.aivt._AltINT3Interrupt>:
 17e:	64 23 00    	nop       
Disassembly of section .aivt._AltINT4Interrupt:

00000180 <.aivt._AltINT4Interrupt>:
 180:	64 23 00    	nop       
Disassembly of section .aivt._AltInterrupt14:

00000130 <.aivt._AltInterrupt14>:
 130:	64 23 00    	nop       
Disassembly of section .aivt._AltInterrupt15:

00000132 <.aivt._AltInterrupt15>:
 132:	64 23 00    	nop       
Disassembly of section .aivt._AltInterrupt21:

0000013e <.aivt._AltInterrupt21>:
 13e:	64 23 00    	nop       
Disassembly of section .aivt._AltInterrupt24:

00000144 <.aivt._AltInterrupt24>:
 144:	64 23 00    	nop       
Disassembly of section .aivt._AltInterrupt34:

00000158 <.aivt._AltInterrupt34>:
 158:	64 23 00    	nop       
Disassembly of section .aivt._AltInterrupt35:

0000015a <.aivt._AltInterrupt35>:
 15a:	64 23 00    	nop       
Disassembly of section .aivt._AltInterrupt36:

0000015c <.aivt._AltInterrupt36>:
 15c:	64 23 00    	nop       
Disassembly of section .aivt._AltInterrupt4:

0000011c <.aivt._AltInterrupt4>:
 11c:	64 23 00    	nop       
Disassembly of section .aivt._AltInterrupt46:

00000170 <.aivt._AltInterrupt46>:
 170:	64 23 00    	nop       
Disassembly of section .aivt._AltInterrupt47:

00000172 <.aivt._AltInterrupt47>:
 172:	64 23 00    	nop       
Disassembly of section .aivt._AltInterrupt48:

00000174 <.aivt._AltInterrupt48>:
 174:	64 23 00    	nop       
Disassembly of section .aivt._AltInterrupt51:

0000017a <.aivt._AltInterrupt51>:
 17a:	64 23 00    	nop       
Disassembly of section .aivt._AltInterrupt52:

0000017c <.aivt._AltInterrupt52>:
 17c:	64 23 00    	nop       
Disassembly of section .aivt._AltInterrupt55:

00000182 <.aivt._AltInterrupt55>:
 182:	64 23 00    	nop       
Disassembly of section .aivt._AltInterrupt56:

00000184 <.aivt._AltInterrupt56>:
 184:	64 23 00    	nop       
Disassembly of section .aivt._AltInterrupt57:

00000186 <.aivt._AltInterrupt57>:
 186:	64 23 00    	nop       
Disassembly of section .aivt._AltInterrupt58:

00000188 <.aivt._AltInterrupt58>:
 188:	64 23 00    	nop       
Disassembly of section .aivt._AltInterrupt59:

0000018a <.aivt._AltInterrupt59>:
 18a:	64 23 00    	nop       
Disassembly of section .aivt._AltInterrupt60:

0000018c <.aivt._AltInterrupt60>:
 18c:	64 23 00    	nop       
Disassembly of section .aivt._AltInterrupt61:

0000018e <.aivt._AltInterrupt61>:
 18e:	64 23 00    	nop       
Disassembly of section .aivt._AltInterrupt63:

00000192 <.aivt._AltInterrupt63>:
 192:	64 23 00    	nop       
Disassembly of section .aivt._AltInterrupt64:

00000194 <.aivt._AltInterrupt64>:
 194:	64 23 00    	nop       
Disassembly of section .aivt._AltInterrupt68:

0000019c <.aivt._AltInterrupt68>:
 19c:	64 23 00    	nop       
Disassembly of section .aivt._AltInterrupt69:

0000019e <.aivt._AltInterrupt69>:
 19e:	64 23 00    	nop       
Disassembly of section .aivt._AltInterrupt70:

000001a0 <.aivt._AltInterrupt70>:
 1a0:	64 23 00    	nop       
Disassembly of section .aivt._AltInterrupt71:

000001a2 <.aivt._AltInterrupt71>:
 1a2:	64 23 00    	nop       
Disassembly of section .aivt._AltInterrupt73:

000001a6 <.aivt._AltInterrupt73>:
 1a6:	64 23 00    	nop       
Disassembly of section .aivt._AltInterrupt74:

000001a8 <.aivt._AltInterrupt74>:
 1a8:	64 23 00    	nop       
Disassembly of section .aivt._AltInterrupt75:

000001aa <.aivt._AltInterrupt75>:
 1aa:	64 23 00    	nop       
Disassembly of section .aivt._AltInterrupt76:

000001ac <.aivt._AltInterrupt76>:
 1ac:	64 23 00    	nop       
Disassembly of section .aivt._AltInterrupt78:

000001b0 <.aivt._AltInterrupt78>:
 1b0:	64 23 00    	nop       
Disassembly of section .aivt._AltInterrupt79:

000001b2 <.aivt._AltInterrupt79>:
 1b2:	64 23 00    	nop       
Disassembly of section .aivt._AltInterrupt80:

000001b4 <.aivt._AltInterrupt80>:
 1b4:	64 23 00    	nop       
Disassembly of section .aivt._AltLVDInterrupt:

000001a4 <.aivt._AltLVDInterrupt>:
 1a4:	64 23 00    	nop       
Disassembly of section .aivt._AltMI2C1Interrupt:

00000136 <.aivt._AltMI2C1Interrupt>:
 136:	64 23 00    	nop       
Disassembly of section .aivt._AltMI2C2Interrupt:

00000178 <.aivt._AltMI2C2Interrupt>:
 178:	64 23 00    	nop       
Disassembly of section .aivt._AltMI2C3Interrupt:

000001be <.aivt._AltMI2C3Interrupt>:
 1be:	64 23 00    	nop       
Disassembly of section .aivt._AltMathError:

0000010c <.aivt._AltMathError>:
 10c:	64 23 00    	nop       
Disassembly of section .aivt._AltOC1Interrupt:

00000118 <.aivt._AltOC1Interrupt>:
 118:	64 23 00    	nop       
Disassembly of section .aivt._AltOC2Interrupt:

00000120 <.aivt._AltOC2Interrupt>:
 120:	64 23 00    	nop       
Disassembly of section .aivt._AltOC3Interrupt:

00000146 <.aivt._AltOC3Interrupt>:
 146:	64 23 00    	nop       
Disassembly of section .aivt._AltOC4Interrupt:

00000148 <.aivt._AltOC4Interrupt>:
 148:	64 23 00    	nop       
Disassembly of section .aivt._AltOC5Interrupt:

00000166 <.aivt._AltOC5Interrupt>:
 166:	64 23 00    	nop       
Disassembly of section .aivt._AltOC6Interrupt:

00000168 <.aivt._AltOC6Interrupt>:
 168:	64 23 00    	nop       
Disassembly of section .aivt._AltOC7Interrupt:

0000016a <.aivt._AltOC7Interrupt>:
 16a:	64 23 00    	nop       
Disassembly of section .aivt._AltOC8Interrupt:

0000016c <.aivt._AltOC8Interrupt>:
 16c:	64 23 00    	nop       
Disassembly of section .aivt._AltOC9Interrupt:

000001cc <.aivt._AltOC9Interrupt>:
 1cc:	64 23 00    	nop       
Disassembly of section .aivt._AltOscillatorFail:

00000106 <.aivt._AltOscillatorFail>:
 106:	64 23 00    	nop       
Disassembly of section .aivt._AltPMPInterrupt:

0000016e <.aivt._AltPMPInterrupt>:
 16e:	64 23 00    	nop       
Disassembly of section .aivt._AltRTCCInterrupt:

00000190 <.aivt._AltRTCCInterrupt>:
 190:	64 23 00    	nop       
Disassembly of section .aivt._AltReservedTrap0:

00000104 <.aivt._AltReservedTrap0>:
 104:	64 23 00    	nop       
Disassembly of section .aivt._AltReservedTrap5:

0000010e <.aivt._AltReservedTrap5>:
 10e:	64 23 00    	nop       
Disassembly of section .aivt._AltReservedTrap6:

00000110 <.aivt._AltReservedTrap6>:
 110:	64 23 00    	nop       
Disassembly of section .aivt._AltReservedTrap7:

00000112 <.aivt._AltReservedTrap7>:
 112:	64 23 00    	nop       
Disassembly of section .aivt._AltSI2C1Interrupt:

00000134 <.aivt._AltSI2C1Interrupt>:
 134:	64 23 00    	nop       
Disassembly of section .aivt._AltSI2C2Interrupt:

00000176 <.aivt._AltSI2C2Interrupt>:
 176:	64 23 00    	nop       
Disassembly of section .aivt._AltSI2C3Interrupt:

000001bc <.aivt._AltSI2C3Interrupt>:
 1bc:	64 23 00    	nop       
Disassembly of section .aivt._AltSPI1ErrInterrupt:

00000126 <.aivt._AltSPI1ErrInterrupt>:
 126:	64 23 00    	nop       
Disassembly of section .aivt._AltSPI1Interrupt:

00000128 <.aivt._AltSPI1Interrupt>:
 128:	64 23 00    	nop       
Disassembly of section .aivt._AltSPI2ErrInterrupt:

00000154 <.aivt._AltSPI2ErrInterrupt>:
 154:	64 23 00    	nop       
Disassembly of section .aivt._AltSPI2Interrupt:

00000156 <.aivt._AltSPI2Interrupt>:
 156:	64 23 00    	nop       
Disassembly of section .aivt._AltSPI3ErrInterrupt:

000001c8 <.aivt._AltSPI3ErrInterrupt>:
 1c8:	64 23 00    	nop       
Disassembly of section .aivt._AltSPI3Interrupt:

000001ca <.aivt._AltSPI3Interrupt>:
 1ca:	64 23 00    	nop       
Disassembly of section .aivt._AltStackError:

0000010a <.aivt._AltStackError>:
 10a:	64 23 00    	nop       
Disassembly of section .aivt._AltT1Interrupt:

0000011a <.aivt._AltT1Interrupt>:
 11a:	64 23 00    	nop       
Disassembly of section .aivt._AltT2Interrupt:

00000122 <.aivt._AltT2Interrupt>:
 122:	64 23 00    	nop       
Disassembly of section .aivt._AltT3Interrupt:

00000124 <.aivt._AltT3Interrupt>:
 124:	64 23 00    	nop       
Disassembly of section .aivt._AltT4Interrupt:

0000014a <.aivt._AltT4Interrupt>:
 14a:	64 23 00    	nop       
Disassembly of section .aivt._AltT5Interrupt:

0000014c <.aivt._AltT5Interrupt>:
 14c:	64 23 00    	nop       
Disassembly of section .aivt._AltU1ErrInterrupt:

00000196 <.aivt._AltU1ErrInterrupt>:
 196:	64 23 00    	nop       
Disassembly of section .aivt._AltU1RXInterrupt:

0000012a <.aivt._AltU1RXInterrupt>:
 12a:	64 23 00    	nop       
Disassembly of section .aivt._AltU1TXInterrupt:

0000012c <.aivt._AltU1TXInterrupt>:
 12c:	64 23 00    	nop       
Disassembly of section .aivt._AltU2ErrInterrupt:

00000198 <.aivt._AltU2ErrInterrupt>:
 198:	64 23 00    	nop       
Disassembly of section .aivt._AltU2RXInterrupt:

00000150 <.aivt._AltU2RXInterrupt>:
 150:	64 23 00    	nop       
Disassembly of section .aivt._AltU2TXInterrupt:

00000152 <.aivt._AltU2TXInterrupt>:
 152:	64 23 00    	nop       
Disassembly of section .aivt._AltU3ErrInterrupt:

000001b6 <.aivt._AltU3ErrInterrupt>:
 1b6:	64 23 00    	nop       
Disassembly of section .aivt._AltU3RXInterrupt:

000001b8 <.aivt._AltU3RXInterrupt>:
 1b8:	64 23 00    	nop       
Disassembly of section .aivt._AltU3TXInterrupt:

000001ba <.aivt._AltU3TXInterrupt>:
 1ba:	64 23 00    	nop       
Disassembly of section .aivt._AltU4ErrInterrupt:

000001c2 <.aivt._AltU4ErrInterrupt>:
 1c2:	64 23 00    	nop       
Disassembly of section .aivt._AltU4RXInterrupt:

000001c4 <.aivt._AltU4RXInterrupt>:
 1c4:	64 23 00    	nop       
Disassembly of section .aivt._AltU4TXInterrupt:

000001c6 <.aivt._AltU4TXInterrupt>:
 1c6:	64 23 00    	nop       
Disassembly of section .aivt._AltUSB1Interrupt:

000001c0 <.aivt._AltUSB1Interrupt>:
 1c0:	64 23 00    	nop       
Disassembly of section .reset:

00000000 <.reset>:
   0:	10 11 04    	goto      0x1110 <__reset>
   2:	00 00 00 
Disassembly of section .text:

00001110 <__reset>:
    1110:	0f a8 20    	mov.w     #0xa80, w15
    1112:	0e ff 27    	mov.w     #0x7ff0, w14
    1114:	0e 01 88    	mov.w     w14, 0x20
    1116:	00 00 00    	nop       
    1118:	00 00 20    	mov.w     #0x0, w0
    111a:	00 00 e0    	cp0.w     w0
    111c:	02 00 32    	bra       Z, 0x1122 <CORCON_RESET>
    111e:	00 01 20    	mov.w     #0x10, w0
    1120:	20 02 88    	mov.w     w0, 0x44

00001122 <CORCON_RESET>:
    1122:	14 00 07    	rcall     0x114c <__psv_init>
    1124:	7d 00 07    	rcall     0x1220 <__crt_start_mode> <__crt_start_mode_normal>
    1126:	00 00 e0    	cp0.w     w0
    1128:	03 00 3a    	bra       NZ, 0x1130 <L11>
    112a:	a0 33 22    	mov.w     #0x233a, w0
    112c:	01 00 20    	mov.w     #0x0, w1
    112e:	02 00 37    	bra       0x1134 <L21>

00001130 <L11>:
    1130:	00 00 20    	mov.w     #0x0, w0
    1132:	01 00 20    	mov.w     #0x0, w1

00001134 <L21>:
    1134:	81 0f 70    	ior.w     w0, w1, [w15]
    1136:	01 00 32    	bra       Z, 0x113a <L12>
    1138:	14 00 07    	rcall     0x1162 <__data_init> <__data_init_da>

0000113a <L12>:
    113a:	00 00 20    	mov.w     #0x0, w0
    113c:	00 00 e0    	cp0.w     w0
    113e:	02 00 32    	bra       Z, 0x1144 <L13>
    1140:	00 00 02    	call      0x0 <__DEFAULT_VECTOR-0x110c>
    1142:	00 00 00 

00001144 <L13>:
    1144:	70 1e 02    	call      0x1e70 <_main>
    1146:	00 00 00 
    1148:	00 40 da    	break     
    114a:	00 00 fe    	reset     

0000114c <__psv_init>:
    114c:	44 40 a9    	bclr.b    0x44, #0x2
    114e:	a0 06 20    	mov.w     #0x6a, w0
    1150:	00 00 e0    	cp0.w     w0
    1152:	03 00 32    	bra       Z, 0x115a <L14>
    1154:	00 20 20    	mov.w     #0x200, w0
    1156:	90 01 88    	mov.w     w0, 0x32
    1158:	44 40 a8    	bset.b    0x44, #0x2

0000115a <L14>:
    115a:	00 00 06    	return    

0000115c <__long_indirect_call>:
    115c:	8a 1f 78    	mov.w     w10, [w15++]
    115e:	8b 1f 78    	mov.w     w11, [w15++]
    1160:	00 00 06    	return    

00001162 <__data_init>:
    1162:	a1 02 88    	mov.w     w1, 0x54
    1164:	80 04 78    	mov.w     w0, w9
    1166:	00 00 eb    	clr.w     w0
    1168:	1f 00 37    	bra       0x11a8 <L41>

0000116a <L11>:
    116a:	e2 84 44    	add.w     w9, #0x2, w9
    116c:	54 a0 b4    	addc.w    0x54
    116e:	99 05 ba    	tblrdl.w  [w9], w11
    1170:	e2 84 44    	add.w     w9, #0x2, w9
    1172:	54 a0 b4    	addc.w    0x54
    1174:	99 06 ba    	tblrdl.w  [w9], w13
    1176:	e2 84 44    	add.w     w9, #0x2, w9
    1178:	54 a0 b4    	addc.w    0x54
    117a:	00 06 eb    	clr.w     w12
    117c:	47 6f de    	lsr.w     w13, #0x7, w14
    117e:	fd 07 b2    	and.w     #0x7f, w13
    1180:	ae 01 88    	mov.w     w14, 0x34
    1182:	63 6c e1    	cp.b      w13, #0x3
    1184:	03 00 3a    	bra       NZ, 0x118c <L21>
    1186:	ea ff 07    	rcall     0x115c <__long_indirect_call>
    1188:	00 00 eb    	clr.w     w0
    118a:	0e 00 37    	bra       0x11a8 <L41>

0000118c <L21>:
    118c:	60 6c e1    	cp.b      w13, #0x0
    118e:	08 00 3a    	bra       NZ, 0x11a0 <L22>

00001190 <L91>:
    1190:	00 4d eb    	clr.b     [w10]
    1192:	0a 05 e8    	inc.w     w10, w10
    1194:	02 00 39    	bra       NC, 0x119a <L81>
    1196:	34 20 ec    	inc.w     0x34
    1198:	0a f0 a0    	bset.w    w10, #0xf

0000119a <L81>:
    119a:	8b 05 e9    	dec.w     w11, w11
    119c:	f9 ff 3e    	bra       GTU, 0x1190 <L91>
    119e:	04 00 37    	bra       0x11a8 <L41>

000011a0 <L22>:
    11a0:	61 68 e1    	cp.w      w13, #0x1
    11a2:	01 00 32    	bra       Z, 0x11a6 <L31>
    11a4:	00 86 eb    	setm.w    w12

000011a6 <L31>:
    11a6:	0b 00 07    	rcall     0x11be <L13> <__memcpyd3extended>

000011a8 <L41>:
    11a8:	19 c7 ba    	tblrdh.b  [w9], w14
    11aa:	19 05 ba    	tblrdl.w  [w9], w10
    11ac:	0e 04 e0    	cp0.b     w14
    11ae:	03 00 3a    	bra       NZ, 0x11b6 <L12>
    11b0:	0a 00 e0    	cp0.w     w10
    11b2:	db ff 3a    	bra       NZ, 0x116a <L11>
    11b4:	00 00 06    	return    

000011b6 <L12>:
    11b6:	fe 07 b2    	and.w     #0x7f, w14
    11b8:	ae 02 88    	mov.w     w14, 0x54
    11ba:	8a 04 78    	mov.w     w10, w9
    11bc:	f5 ff 37    	bra       0x11a8 <L41>

000011be <L13>:
    11be:	0c d0 a3    	btst.c    w12, #0xd
    11c0:	e2 0f 4d    	addc.w    w10, #0x2, [w15]
    11c2:	1c 00 39    	bra       NC, 0x11fc <L23>
    11c4:	89 02 78    	mov.w     w9, w5
    11c6:	35 4d ba    	tblrdl.b  [w5++], [w10]
    11c8:	0a 05 e8    	inc.w     w10, w10
    11ca:	02 00 39    	bra       NC, 0x11d0 <L32>
    11cc:	34 20 ec    	inc.w     0x34
    11ce:	0a f0 a0    	bset.w    w10, #0xf

000011d0 <L32>:
    11d0:	8b 05 e9    	dec.w     w11, w11
    11d2:	0f 00 32    	bra       Z, 0x11f2 <L42>
    11d4:	25 4d ba    	tblrdl.b  [w5--], [w10]
    11d6:	0a 05 e8    	inc.w     w10, w10
    11d8:	02 00 39    	bra       NC, 0x11de <L33>
    11da:	34 20 ec    	inc.w     0x34
    11dc:	0a f0 a0    	bset.w    w10, #0xf

000011de <L33>:
    11de:	8b 05 e9    	dec.w     w11, w11
    11e0:	08 00 32    	bra       Z, 0x11f2 <L42>
    11e2:	0c 00 e0    	cp0.w     w12
    11e4:	06 00 32    	bra       Z, 0x11f2 <L42>
    11e6:	15 cd ba    	tblrdh.b  [w5], [w10]
    11e8:	0a 05 e8    	inc.w     w10, w10
    11ea:	02 00 39    	bra       NC, 0x11f0 <L34>
    11ec:	34 20 ec    	inc.w     0x34
    11ee:	0a f0 a0    	bset.w    w10, #0xf

000011f0 <L34>:
    11f0:	8b 05 e9    	dec.w     w11, w11

000011f2 <L42>:
    11f2:	89 84 e8    	inc2.w    w9, w9
    11f4:	54 a0 b4    	addc.w    0x54
    11f6:	0b 00 e0    	cp0.w     w11
    11f8:	e2 ff 3a    	bra       NZ, 0x11be <L13> <__memcpyd3extended>
    11fa:	00 00 06    	return    

000011fc <L23>:
    11fc:	99 02 ba    	tblrdl.w  [w9], w5
    11fe:	05 5d 78    	mov.b     w5, [w10++]
    1200:	8b 05 e9    	dec.w     w11, w11
    1202:	f7 ff 32    	bra       Z, 0x11f2 <L42>
    1204:	c8 2a de    	lsr.w     w5, #0x8, w5
    1206:	05 5d 78    	mov.b     w5, [w10++]
    1208:	8b 05 e9    	dec.w     w11, w11
    120a:	f3 ff 32    	bra       Z, 0x11f2 <L42>
    120c:	0c 00 e0    	cp0.w     w12
    120e:	f1 ff 32    	bra       Z, 0x11f2 <L42>
    1210:	19 dd ba    	tblrdh.b  [w9], [w10++]
    1212:	ee ff 37    	bra       0x11f0 <L34>

00001214 <.handle>:
    1214:	80 1d 04    	goto      0x1d80 <_vendor_requests>
    1216:	00 00 00 
    1218:	a8 13 04    	goto      0x13a8 <_usb_set_address_callback>
    121a:	00 00 00 
    121c:	e2 1b 04    	goto      0x1be2 <_usb_send_data_packet>
    121e:	00 00 00 

00001220 <__crt_start_mode>:
    1220:	00 00 05    	retlw.w   #0x0, w0

00001222 <___modsi3>:
    1222:	81 1f 78    	mov.w     w1, [w15++]
    1224:	01 00 e0    	cp0.w     w1
    1226:	02 00 3d    	bra       GE, 0x122c <modtestb>
    1228:	60 00 10    	subr.w    w0, #0x0, w0
    122a:	e0 80 18    	subbr.w   w1, #0x0, w1

0000122c <modtestb>:
    122c:	03 00 e0    	cp0.w     w3
    122e:	02 00 3d    	bra       GE, 0x1234 <calcrem>
    1230:	60 01 11    	subr.w    w2, #0x0, w2
    1232:	e0 81 19    	subbr.w   w3, #0x0, w3

00001234 <calcrem>:
    1234:	05 00 07    	rcall     0x1240 <___umodsi3>
    1236:	4f 00 e0    	cp0.w     [--w15]
    1238:	02 00 3b    	bra       NN, 0x123e <exitr>
    123a:	60 00 10    	subr.w    w0, #0x0, w0
    123c:	e0 80 18    	subbr.w   w1, #0x0, w1

0000123e <exitr>:
    123e:	00 00 06    	return    

00001240 <___umodsi3>:
    1240:	02 00 07    	rcall     0x1246 <___udivsi3>
    1242:	04 00 be    	mov.d     w4, w0
    1244:	00 00 06    	return    

00001246 <___udivsi3>:
    1246:	60 22 b8    	mul.uu    w4, #0x0, w4
    1248:	06 02 20    	mov.w     #0x20, w6

0000124a <nextbit>:
    124a:	00 00 d0    	sl.w      w0, w0
    124c:	81 80 d2    	rlc.w     w1, w1
    124e:	04 82 d2    	rlc.w     w4, w4
    1250:	85 82 d2    	rlc.w     w5, w5
    1252:	00 00 a0    	bset.w    w0, #0x0
    1254:	02 02 52    	sub.w     w4, w2, w4
    1256:	83 82 5a    	subb.w    w5, w3, w5
    1258:	03 00 31    	bra       C, 0x1260 <iterate>
    125a:	02 02 42    	add.w     w4, w2, w4
    125c:	83 82 4a    	addc.w    w5, w3, w5
    125e:	00 00 a1    	bclr.w    w0, #0x0

00001260 <iterate>:
    1260:	06 03 e9    	dec.w     w6, w6
    1262:	f3 ff 3a    	bra       NZ, 0x124a <nextbit>
    1264:	00 00 06    	return    

00001266 <_rand>:
    1266:	88 9f be    	mov.d     w8, [w15++]
    1268:	50 41 80    	mov.w     0x82a, w0
    126a:	00 00 e0    	cp0.w     w0
    126c:	01 00 32    	bra       Z, 0x1270 <.L2>
    126e:	00 00 01    	call      w0

00001270 <.L2>:
    1270:	60 41 80    	mov.w     0x82c, w0
    1272:	00 00 e0    	cp0.w     w0
    1274:	01 00 32    	bra       Z, 0x1278 <.L3>
    1276:	00 00 01    	call      w0

00001278 <.L3>:
    1278:	80 82 20    	mov.w     #0x828, w0
    127a:	10 04 e0    	cp0.b     [w0]
    127c:	22 00 3a    	bra       NZ, 0x12c2 <.L4>
    127e:	00 4c 80    	mov.w     0x980, w0
    1280:	11 4c 80    	mov.w     0x982, w1
    1282:	88 00 20    	mov.w     #0x8, w8

00001284 <.L5>:
    1284:	d2 60 26    	mov.w     #0x660d, w2
    1286:	93 01 20    	mov.w     #0x19, w3
    1288:	35 00 07    	rcall     0x12f4 <___mulp32eds3> <___mulp32peds3> <___mulsi3>
    128a:	f2 35 2f    	mov.w     #0xf35f, w2
    128c:	e3 c6 23    	mov.w     #0x3c6e, w3
    128e:	00 00 41    	add.w     w2, w0, w0
    1290:	81 80 49    	addc.w    w3, w1, w1
    1292:	08 04 e9    	dec.w     w8, w8
    1294:	f7 ff 3a    	bra       NZ, 0x1284 <.L5>
    1296:	e8 82 20    	mov.w     #0x82e, w8
    1298:	09 08 20    	mov.w     #0x80, w9
    129a:	88 84 44    	add.w     w9, w8, w9

0000129c <.L6>:
    129c:	d2 60 26    	mov.w     #0x660d, w2
    129e:	93 01 20    	mov.w     #0x19, w3
    12a0:	29 00 07    	rcall     0x12f4 <___mulp32eds3> <___mulp32peds3> <___mulsi3>
    12a2:	f2 35 2f    	mov.w     #0xf35f, w2
    12a4:	e3 c6 23    	mov.w     #0x3c6e, w3
    12a6:	00 00 41    	add.w     w2, w0, w0
    12a8:	81 80 49    	addc.w    w3, w1, w1
    12aa:	00 ac be    	mov.d     w0, [++w8]
    12ac:	89 0f 54    	sub.w     w8, w9, [w15]
    12ae:	f6 ff 3a    	bra       NZ, 0x129c <.L6>
    12b0:	00 4c 88    	mov.w     w0, 0x980
    12b2:	11 4c 88    	mov.w     w1, 0x982
    12b4:	70 45 80    	mov.w     0x8ae, w0
    12b6:	81 45 80    	mov.w     0x8b0, w1
    12b8:	70 41 88    	mov.w     w0, 0x82e
    12ba:	81 41 88    	mov.w     w1, 0x830
    12bc:	11 c0 b3    	mov.b     #0x1, w1
    12be:	80 82 20    	mov.w     #0x828, w0
    12c0:	01 48 78    	mov.b     w1, [w0]

000012c2 <.L4>:
    12c2:	d2 60 26    	mov.w     #0x660d, w2
    12c4:	93 01 20    	mov.w     #0x19, w3
    12c6:	00 4c 80    	mov.w     0x980, w0
    12c8:	11 4c 80    	mov.w     0x982, w1
    12ca:	14 00 07    	rcall     0x12f4 <___mulp32eds3> <___mulp32peds3> <___mulsi3>
    12cc:	f2 35 2f    	mov.w     #0xf35f, w2
    12ce:	e3 c6 23    	mov.w     #0x3c6e, w3
    12d0:	00 02 41    	add.w     w2, w0, w4
    12d2:	81 82 49    	addc.w    w3, w1, w5
    12d4:	04 4c 88    	mov.w     w4, 0x980
    12d6:	15 4c 88    	mov.w     w5, 0x982
    12d8:	e0 82 20    	mov.w     #0x82e, w0
    12da:	10 00 78    	mov.w     [w0], w0
    12dc:	7f 01 60    	and.w     w0, #0x1f, w2
    12de:	42 11 dd    	sl.w      w2, #0x2, w2
    12e0:	20 83 20    	mov.w     #0x832, w0
    12e2:	02 01 40    	add.w     w0, w2, w2
    12e4:	12 00 be    	mov.d     [w2], w0
    12e6:	70 41 88    	mov.w     w0, 0x82e
    12e8:	81 41 88    	mov.w     w1, 0x830
    12ea:	04 89 be    	mov.d     w4, [w2]
    12ec:	01 00 78    	mov.w     w1, w0
    12ee:	00 f0 a1    	bclr.w    w0, #0xf
    12f0:	4f 04 be    	mov.d     [--w15], w8
    12f2:	00 00 06    	return    

000012f4 <___mulp32eds3>:
    12f4:	02 0a b9    	mul.su    w1, w2, w4
    12f6:	00 1b b9    	mul.su    w3, w0, w6
    12f8:	02 00 b8    	mul.uu    w0, w2, w0
    12fa:	81 00 42    	add.w     w4, w1, w1
    12fc:	81 00 43    	add.w     w6, w1, w1
    12fe:	00 00 06    	return    
Disassembly of section .application_ivt:

00001000 <__DEFAULT_VECTOR-0x10c>:
    1000:	10 11 04    	goto      0x1110 <__reset>
    1002:	00 00 00 
    1004:	64 23 04    	goto      0x2364 <__DefaultInterrupt>
    1006:	00 00 00 
    1008:	64 23 04    	goto      0x2364 <__DefaultInterrupt>
    100a:	00 00 00 
    100c:	64 23 04    	goto      0x2364 <__DefaultInterrupt>
    100e:	00 00 00 
    1010:	64 23 04    	goto      0x2364 <__DefaultInterrupt>
    1012:	00 00 00 
    1014:	64 23 04    	goto      0x2364 <__DefaultInterrupt>
    1016:	00 00 00 
    1018:	64 23 04    	goto      0x2364 <__DefaultInterrupt>
    101a:	00 00 00 
    101c:	64 23 04    	goto      0x2364 <__DefaultInterrupt>
    101e:	00 00 00 
    1020:	64 23 04    	goto      0x2364 <__DefaultInterrupt>
    1022:	00 00 00 
    1024:	64 23 04    	goto      0x2364 <__DefaultInterrupt>
    1026:	00 00 00 
    1028:	64 23 04    	goto      0x2364 <__DefaultInterrupt>
    102a:	00 00 00 
    102c:	64 23 04    	goto      0x2364 <__DefaultInterrupt>
    102e:	00 00 00 
    1030:	64 23 04    	goto      0x2364 <__DefaultInterrupt>
    1032:	00 00 00 
    1034:	64 23 04    	goto      0x2364 <__DefaultInterrupt>
    1036:	00 00 00 
    1038:	64 23 04    	goto      0x2364 <__DefaultInterrupt>
    103a:	00 00 00 
    103c:	64 23 04    	goto      0x2364 <__DefaultInterrupt>
    103e:	00 00 00 
    1040:	64 23 04    	goto      0x2364 <__DefaultInterrupt>
    1042:	00 00 00 
    1044:	64 23 04    	goto      0x2364 <__DefaultInterrupt>
    1046:	00 00 00 
    1048:	64 23 04    	goto      0x2364 <__DefaultInterrupt>
    104a:	00 00 00 
    104c:	64 23 04    	goto      0x2364 <__DefaultInterrupt>
    104e:	00 00 00 
    1050:	64 23 04    	goto      0x2364 <__DefaultInterrupt>
    1052:	00 00 00 
    1054:	64 23 04    	goto      0x2364 <__DefaultInterrupt>
    1056:	00 00 00 
    1058:	64 23 04    	goto      0x2364 <__DefaultInterrupt>
    105a:	00 00 00 
    105c:	64 23 04    	goto      0x2364 <__DefaultInterrupt>
    105e:	00 00 00 
    1060:	64 23 04    	goto      0x2364 <__DefaultInterrupt>
    1062:	00 00 00 
    1064:	64 23 04    	goto      0x2364 <__DefaultInterrupt>
    1066:	00 00 00 
    1068:	64 23 04    	goto      0x2364 <__DefaultInterrupt>
    106a:	00 00 00 
    106c:	64 23 04    	goto      0x2364 <__DefaultInterrupt>
    106e:	00 00 00 
    1070:	64 23 04    	goto      0x2364 <__DefaultInterrupt>
    1072:	00 00 00 
    1074:	64 23 04    	goto      0x2364 <__DefaultInterrupt>
    1076:	00 00 00 
    1078:	64 23 04    	goto      0x2364 <__DefaultInterrupt>
    107a:	00 00 00 
    107c:	64 23 04    	goto      0x2364 <__DefaultInterrupt>
    107e:	00 00 00 
    1080:	64 23 04    	goto      0x2364 <__DefaultInterrupt>
    1082:	00 00 00 
    1084:	64 23 04    	goto      0x2364 <__DefaultInterrupt>
    1086:	00 00 00 
    1088:	64 23 04    	goto      0x2364 <__DefaultInterrupt>
    108a:	00 00 00 
    108c:	64 23 04    	goto      0x2364 <__DefaultInterrupt>
    108e:	00 00 00 
    1090:	64 23 04    	goto      0x2364 <__DefaultInterrupt>
    1092:	00 00 00 
    1094:	64 23 04    	goto      0x2364 <__DefaultInterrupt>
    1096:	00 00 00 
    1098:	64 23 04    	goto      0x2364 <__DefaultInterrupt>
    109a:	00 00 00 
    109c:	64 23 04    	goto      0x2364 <__DefaultInterrupt>
    109e:	00 00 00 
    10a0:	64 23 04    	goto      0x2364 <__DefaultInterrupt>
    10a2:	00 00 00 
    10a4:	64 23 04    	goto      0x2364 <__DefaultInterrupt>
    10a6:	00 00 00 
    10a8:	64 23 04    	goto      0x2364 <__DefaultInterrupt>
    10aa:	00 00 00 
    10ac:	64 23 04    	goto      0x2364 <__DefaultInterrupt>
    10ae:	00 00 00 
    10b0:	64 23 04    	goto      0x2364 <__DefaultInterrupt>
    10b2:	00 00 00 
    10b4:	64 23 04    	goto      0x2364 <__DefaultInterrupt>
    10b6:	00 00 00 
    10b8:	64 23 04    	goto      0x2364 <__DefaultInterrupt>
    10ba:	00 00 00 
    10bc:	64 23 04    	goto      0x2364 <__DefaultInterrupt>
    10be:	00 00 00 
    10c0:	64 23 04    	goto      0x2364 <__DefaultInterrupt>
    10c2:	00 00 00 
    10c4:	64 23 04    	goto      0x2364 <__DefaultInterrupt>
    10c6:	00 00 00 
    10c8:	64 23 04    	goto      0x2364 <__DefaultInterrupt>
    10ca:	00 00 00 
    10cc:	64 23 04    	goto      0x2364 <__DefaultInterrupt>
    10ce:	00 00 00 
    10d0:	64 23 04    	goto      0x2364 <__DefaultInterrupt>
    10d2:	00 00 00 
    10d4:	64 23 04    	goto      0x2364 <__DefaultInterrupt>
    10d6:	00 00 00 
    10d8:	64 23 04    	goto      0x2364 <__DefaultInterrupt>
    10da:	00 00 00 
    10dc:	64 23 04    	goto      0x2364 <__DefaultInterrupt>
    10de:	00 00 00 
    10e0:	64 23 04    	goto      0x2364 <__DefaultInterrupt>
    10e2:	00 00 00 
    10e4:	64 23 04    	goto      0x2364 <__DefaultInterrupt>
    10e6:	00 00 00 
    10e8:	64 23 04    	goto      0x2364 <__DefaultInterrupt>
    10ea:	00 00 00 
    10ec:	64 23 04    	goto      0x2364 <__DefaultInterrupt>
    10ee:	00 00 00 
    10f0:	64 23 04    	goto      0x2364 <__DefaultInterrupt>
    10f2:	00 00 00 
    10f4:	64 23 04    	goto      0x2364 <__DefaultInterrupt>
    10f6:	00 00 00 
    10f8:	64 23 04    	goto      0x2364 <__DefaultInterrupt>
    10fa:	00 00 00 
    10fc:	64 23 04    	goto      0x2364 <__DefaultInterrupt>
    10fe:	00 00 00 
    1100:	64 23 04    	goto      0x2364 <__DefaultInterrupt>
    1102:	00 00 00 
    1104:	64 23 04    	goto      0x2364 <__DefaultInterrupt>
    1106:	00 00 00 
    1108:	64 23 04    	goto      0x2364 <__DefaultInterrupt>
    110a:	00 00 00 

0000110c <__DEFAULT_VECTOR>:
    110c:	64 23 04    	goto      0x2364 <__DefaultInterrupt>
    110e:	00 00 00 
Disassembly of section .ivt:

00000004 <.ivt>:
   4:	04 10 00    	nop       
   6:	08 10 00    	nop       
   8:	0c 10 00    	nop       
   a:	10 10 00    	nop       
   c:	14 10 00    	nop       
   e:	0c 11 00    	nop       
  10:	0c 11 00    	nop       
  12:	0c 11 00    	nop       
  14:	18 10 00    	nop       
  16:	1c 10 00    	nop       
  18:	20 10 00    	nop       
  1a:	24 10 00    	nop       
  1c:	0c 11 00    	nop       
  1e:	28 10 00    	nop       
  20:	2c 10 00    	nop       
  22:	30 10 00    	nop       
  24:	34 10 00    	nop       
  26:	38 10 00    	nop       
  28:	3c 10 00    	nop       
  2a:	40 10 00    	nop       
  2c:	44 10 00    	nop       
  2e:	48 10 00    	nop       
  30:	0c 11 00    	nop       
  32:	0c 11 00    	nop       
  34:	4c 10 00    	nop       
  36:	50 10 00    	nop       
  38:	54 10 00    	nop       
  3a:	58 10 00    	nop       
  3c:	5c 10 00    	nop       
  3e:	0c 11 00    	nop       
  40:	60 10 00    	nop       
  42:	64 10 00    	nop       
  44:	0c 11 00    	nop       
  46:	68 10 00    	nop       
  48:	6c 10 00    	nop       
  4a:	70 10 00    	nop       
  4c:	74 10 00    	nop       
  4e:	78 10 00    	nop       
  50:	7c 10 00    	nop       
  52:	80 10 00    	nop       
  54:	84 10 00    	nop       
  56:	88 10 00    	nop       
  58:	0c 11 00    	nop       
  5a:	0c 11 00    	nop       
  5c:	0c 11 00    	nop       
  5e:	8c 10 00    	nop       
  60:	90 10 00    	nop       
  62:	94 10 00    	nop       
  64:	98 10 00    	nop       
  66:	9c 10 00    	nop       
  68:	a0 10 00    	nop       
  6a:	a4 10 00    	nop       
  6c:	a8 10 00    	nop       
  6e:	ac 10 00    	nop       
  70:	0c 11 00    	nop       
  72:	0c 11 00    	nop       
  74:	0c 11 00    	nop       
  76:	b0 10 00    	nop       
  78:	b4 10 00    	nop       
  7a:	0c 11 00    	nop       
  7c:	0c 11 00    	nop       
  7e:	b8 10 00    	nop       
  80:	bc 10 00    	nop       
  82:	0c 11 00    	nop       
  84:	0c 11 00    	nop       
  86:	0c 11 00    	nop       
  88:	0c 11 00    	nop       
  8a:	0c 11 00    	nop       
  8c:	0c 11 00    	nop       
  8e:	0c 11 00    	nop       
  90:	c0 10 00    	nop       
  92:	0c 11 00    	nop       
  94:	0c 11 00    	nop       
  96:	c4 10 00    	nop       
  98:	c8 10 00    	nop       
  9a:	cc 10 00    	nop       
  9c:	0c 11 00    	nop       
  9e:	0c 11 00    	nop       
  a0:	0c 11 00    	nop       
  a2:	0c 11 00    	nop       
  a4:	d0 10 00    	nop       
  a6:	0c 11 00    	nop       
  a8:	0c 11 00    	nop       
  aa:	0c 11 00    	nop       
  ac:	0c 11 00    	nop       
  ae:	d4 10 00    	nop       
  b0:	0c 11 00    	nop       
  b2:	0c 11 00    	nop       
  b4:	0c 11 00    	nop       
  b6:	d8 10 00    	nop       
  b8:	dc 10 00    	nop       
  ba:	e0 10 00    	nop       
  bc:	e4 10 00    	nop       
  be:	e8 10 00    	nop       
  c0:	ec 10 00    	nop       
  c2:	f0 10 00    	nop       
  c4:	f4 10 00    	nop       
  c6:	f8 10 00    	nop       
  c8:	fc 10 00    	nop       
  ca:	00 11 00    	nop       
  cc:	04 11 00    	nop       
  ce:	08 11 00    	nop       
  d0:	0c 11 00    	nop       
  d2:	0c 11 00    	nop       
  d4:	0c 11 00    	nop       
  d6:	0c 11 00    	nop       
  d8:	0c 11 00    	nop       
  da:	0c 11 00    	nop       
  dc:	0c 11 00    	nop       
  de:	0c 11 00    	nop       
  e0:	0c 11 00    	nop       
  e2:	0c 11 00    	nop       
  e4:	0c 11 00    	nop       
  e6:	0c 11 00    	nop       
  e8:	0c 11 00    	nop       
  ea:	0c 11 00    	nop       
  ec:	0c 11 00    	nop       
  ee:	0c 11 00    	nop       
  f0:	0c 11 00    	nop       
  f2:	0c 11 00    	nop       
  f4:	0c 11 00    	nop       
  f6:	0c 11 00    	nop       
  f8:	0c 11 00    	nop       
  fa:	0c 11 00    	nop       
  fc:	0c 11 00    	nop       
  fe:	0c 11 00    	nop       
Disassembly of section .const:

00009300 <_Device>:
    9300:	12 01       	.word 0x112
    9302:	00 02       	.word 0x200
    9304:	00 00       	.word 0
    9306:	00 40       	.word 0x4000
    9308:	66 66       	.word 0x6666
    930a:	03 00       	.word 0x3
    930c:	00 00       	.word 0
    930e:	01 02       	.word 0x201
    9310:	00 01       	.word 0x100

00009312 <_Configuration1>:
    9312:	09 02       	.word 0x209
    9314:	12 00       	.word 0x12
    9316:	01 01       	.word 0x101
    9318:	00 a0       	.word 0xa000
    931a:	32 09       	.word 0x932
    931c:	04 00       	.word 0x4
    931e:	00 00       	.word 0
    9320:	ff 00       	.word 0xff
    9322:	ff 00       	.word 0xff

00009324 <_Configurations>:
    9324:	12 93       	.word 0x9312

00009326 <_String0>:
    9326:	04 03       	.word 0x304
    9328:	09 04       	.word 0x409

0000932a <_String1>:
    932a:	1a 03       	.word 0x31a
    932c:	4f 00       	.word 0x4f
    932e:	6c 00       	.word 0x6c
    9330:	69 00       	.word 0x69
    9332:	6e 00       	.word 0x6e
    9334:	20 00       	.word 0x20
    9336:	43 00       	.word 0x43
    9338:	6f 00       	.word 0x6f
    933a:	6c 00       	.word 0x6c
    933c:	6c 00       	.word 0x6c
    933e:	65 00       	.word 0x65
    9340:	67 00       	.word 0x67
    9342:	65 00       	.word 0x65

00009344 <_String2>:
    9344:	20 03       	.word 0x320
    9346:	50 00       	.word 0x50
    9348:	49 00       	.word 0x49
    934a:	43 00       	.word 0x43
    934c:	32 00       	.word 0x32
    934e:	34 00       	.word 0x34
    9350:	46 00       	.word 0x46
    9352:	4a 00       	.word 0x4a
    9354:	31 00       	.word 0x31
    9356:	32 00       	.word 0x32
    9358:	38 00       	.word 0x38
    935a:	47 00       	.word 0x47
    935c:	42 00       	.word 0x42
    935e:	32 00       	.word 0x32
    9360:	30 00       	.word 0x30
    9362:	36 00       	.word 0x36

00009364 <_Strings>:
    9364:	26 93       	.word 0x9326
    9366:	2a 93       	.word 0x932a
    9368:	44 93       	.word 0x9344
Disassembly of section .text:

0000136a <_usb_disable_endpoints>:
    usb_service();
}
#endif

void usb_disable_endpoints(uint8_t starting_ep) {
    136a:	06 00 fa    	lnk       #0x6
    136c:	40 47 98    	mov.b     w0, [w14+4]
    uint16_t *U1EP;
    uint8_t ep;

    U1EP = (uint16_t *)&U1EP0;
    136e:	a0 4a 20    	mov.w     #0x4aa, w0
    1370:	10 07 98    	mov.w     w0, [w14+2]
    for (ep = starting_ep; ep < 16; ep++) {
    1372:	ce 40 90    	mov.b     [w14+4], w1
    1374:	01 4f 78    	mov.b     w1, [w14]
    1376:	13 00 37    	bra       0x139e <.L2>

00001378 <.L3>:
        U1EP[ep] = ENDPT_DISABLED;
    1378:	1e 80 fb    	ze        [w14], w0
    137a:	00 00 40    	add.w     w0, w0, w0
    137c:	9e 00 90    	mov.w     [w14+2], w1
    137e:	00 80 40    	add.w     w1, w0, w0
    1380:	80 00 eb    	clr.w     w1
    1382:	01 08 78    	mov.w     w1, [w0]
        USB_in_callbacks[ep] = (USB_CALLBACK_T)NULL;
    1384:	1e 80 fb    	ze        [w14], w0
    1386:	80 00 40    	add.w     w0, w0, w1
    1388:	00 94 20    	mov.w     #0x940, w0
    138a:	00 80 40    	add.w     w1, w0, w0
    138c:	80 00 eb    	clr.w     w1
    138e:	01 08 78    	mov.w     w1, [w0]
        USB_out_callbacks[ep] = (USB_CALLBACK_T)NULL;
    1390:	1e 80 fb    	ze        [w14], w0
    1392:	80 00 40    	add.w     w0, w0, w1
    1394:	00 96 20    	mov.w     #0x960, w0
    1396:	00 80 40    	add.w     w1, w0, w0
    1398:	80 00 eb    	clr.w     w1
    139a:	01 08 78    	mov.w     w1, [w0]
    139c:	1e 4f e8    	inc.b     [w14], [w14]

0000139e <.L2>:
    139e:	1e 40 78    	mov.b     [w14], w0
    13a0:	ef 4f 50    	sub.b     w0, #0xf, [w15]
    13a2:	ea ff 36    	bra       LEU, 0x1378 <.L3>
    }
}
    13a4:	00 80 fa    	ulnk      
    13a6:	00 00 06    	return    

000013a8 <_usb_set_address_callback>:

void usb_set_address_callback(void) {
    13a8:	00 00 fa    	lnk       #0x0
    switch (U1ADDR = USB_request.setup.wValue.b[0]) {
    13aa:	40 93 20    	mov.w     #0x934, w0
    13ac:	10 40 78    	mov.b     [w0], w0
    13ae:	00 80 fb    	ze        w0, w0
    13b0:	b0 24 88    	mov.w     w0, 0x496
    13b2:	b0 24 80    	mov.w     0x496, w0
    13b4:	00 00 e0    	cp0.w     w0
    13b6:	03 00 3a    	bra       NZ, 0x13be <.L8>
        case 0:
            USB_USWSTAT = DEFAULT_STATE;
    13b8:	10 c0 b3    	mov.b     #0x1, w0
    13ba:	10 e8 b7    	mov.b     WREG, 0x810
            break;
    13bc:	02 00 37    	bra       0x13c2 <.L7>

000013be <.L8>:
        default:
            USB_USWSTAT = ADDRESS_STATE;
    13be:	20 c0 b3    	mov.b     #0x2, w0
    13c0:	10 e8 b7    	mov.b     WREG, 0x810

000013c2 <.L7>:
    }
    USB_in_callbacks[0] = (USB_CALLBACK_T)NULL;
    13c2:	00 00 eb    	clr.w     w0
    13c4:	00 4a 88    	mov.w     w0, 0x940
}
    13c6:	00 80 fa    	ulnk      
    13c8:	00 00 06    	return    

000013ca <_init_usb>:

void init_usb(void) {
    13ca:	00 00 fa    	lnk       #0x0
    IEC5bits.USB1IE = 0;                    // disable USB interrupt
    13cc:	9e c0 a9    	bclr.b    0x9e, #0x6

    U1CONbits.PPBRST = 1;
    13ce:	94 24 a8    	bset.b    0x494, #0x1
    U1ADDR = 0;
    13d0:	96 24 ef    	clr.w     0x496
    U1EIR = 0xFF;
    13d2:	f0 0f 20    	mov.w     #0xff, w0
    13d4:	70 24 88    	mov.w     w0, 0x48e
    U1CONbits.PPBRST = 0;
    13d6:	94 24 a9    	bclr.b    0x494, #0x1
    usb_disable_endpoints(0);               // disable all endpoints
    13d8:	00 40 eb    	clr.b     w0
    13da:	c7 ff 07    	rcall     0x136a <_usb_disable_endpoints> <.L0> <.LFB0> <.Ltext0>
    U1EP0 = ENDPT_CONTROL;
    13dc:	d0 00 20    	mov.w     #0xd, w0
    13de:	50 25 88    	mov.w     w0, 0x4aa
    BD[EP0OUT].bytecount = MAX_PACKET_SIZE;
    13e0:	00 a0 20    	mov.w     #0xa00, w0
    13e2:	01 c4 b3    	mov.b     #0x40, w1
    13e4:	01 48 78    	mov.b     w1, [w0]
    BD[EP0OUT].address = EP0_OUT_buffer;    // EP0 OUT gets a buffer
    13e6:	20 8b 20    	mov.w     #0x8b2, w0
    13e8:	10 50 88    	mov.w     w0, 0xa02
    BD[EP0OUT].status = UOWN | DTSEN;       // set UOWN bit (USB can write)
    13ea:	10 a0 20    	mov.w     #0xa01, w0
    13ec:	81 c8 b3    	mov.b     #0x88, w1
    13ee:	01 48 78    	mov.b     w1, [w0]
    BD[EP0IN].address = EP0_IN_buffer;      // EP0 IN gets a buffer
    13f0:	20 8f 20    	mov.w     #0x8f2, w0
    13f2:	30 50 88    	mov.w     w0, 0xa06
    BD[EP0IN].status = DTSEN;               // clear UOWN bit (MCU can write)
    13f4:	50 a0 20    	mov.w     #0xa05, w0
    13f6:	81 c0 b3    	mov.b     #0x8, w1
    13f8:	01 48 78    	mov.b     w1, [w0]
    U1CNFG1 = 0;
    13fa:	a6 24 ef    	clr.w     0x4a6
    U1CNFG2 = 0;
    13fc:	a8 24 ef    	clr.w     0x4a8
    U1BDTP1 = (uint16_t)BD >> 8;
    13fe:	00 a0 20    	mov.w     #0xa00, w0
    1400:	48 00 de    	lsr.w     w0, #0x8, w0
    1402:	c0 24 88    	mov.w     w0, 0x498
    U1OTGCONbits.OTGEN = 1;
    1404:	86 44 a8    	bset.b    0x486, #0x2
    U1OTGCONbits.DPPULUP = 1;
    1406:	86 e4 a8    	bset.b    0x486, #0x7
    U1PWRCbits.USBPWR = 1;
    1408:	88 04 a8    	bset.b    0x488, #0x0
    U1CONbits.PKTDIS = 0;
    140a:	94 a4 a9    	bclr.b    0x494, #0x5
    USB_curr_config = 0;
    140c:	0d 68 ef    	clr.b     0x80d
    USB_USWSTAT = POWERED_STATE;
    140e:	10 68 ef    	clr.b     0x810
    USB_device_status = 1;
    1410:	10 c0 b3    	mov.b     #0x1, w0
    1412:	0e e8 b7    	mov.b     WREG, 0x80e
    USB_request.setup.bmRequestType = NO_REQUEST;
    1414:	20 93 20    	mov.w     #0x932, w0
    1416:	80 c0 eb    	setm.b    w1
    1418:	01 48 78    	mov.b     w1, [w0]
    USB_request.setup.bRequest = NO_REQUEST;
    141a:	30 93 20    	mov.w     #0x933, w0
    141c:	80 c0 eb    	setm.b    w1
    141e:	01 48 78    	mov.b     w1, [w0]
    USB_request.bytes_left.w = 0;
    1420:	00 00 eb    	clr.w     w0
    1422:	e0 49 88    	mov.w     w0, 0x93c
    USB_request.done_callback = (USB_CALLBACK_T)NULL;
    1424:	00 00 eb    	clr.w     w0
    1426:	f0 49 88    	mov.w     w0, 0x93e
    while (U1CONbits.SE0) {}
    1428:	00 00 00    	nop       

0000142a <.L10>:
    142a:	a1 24 80    	mov.w     0x494, w1
    142c:	00 04 20    	mov.w     #0x40, w0
    142e:	00 80 60    	and.w     w1, w0, w0
    1430:	00 00 e0    	cp0.w     w0
    1432:	fb ff 3a    	bra       NZ, 0x142a <.L10>

#ifdef USB_INTERRUPT
    U1IE = 0xFF;
    U1EIE = 0xFF;
    IFS5bits.USB1IF = 0;
    IEC5bits.USB1IE = 1;
#endif
}
    1434:	00 80 fa    	ulnk      
    1436:	00 00 06    	return    

00001438 <_usb_service>:

void usb_service(void) {
    1438:	04 00 fa    	lnk       #0x4
    BUFDESC *buf_desc_ptr;
    uint8_t ep;

    if (U1IRbits.UERRIF) {
    143a:	50 24 80    	mov.w     0x48a, w0
    143c:	62 00 60    	and.w     w0, #0x2, w0
    143e:	00 00 e0    	cp0.w     w0
    1440:	05 00 32    	bra       Z, 0x144c <.L12>
        U1EIR = 0xFF;                       // clear all flags in U1EIR to clear U1EIR
    1442:	f0 0f 20    	mov.w     #0xff, w0
    1444:	70 24 88    	mov.w     w0, 0x48e
        U1IR = U1IR_UERRIF;                 // clear UERRIF
    1446:	20 00 20    	mov.w     #0x2, w0
    1448:	50 24 88    	mov.w     w0, 0x48a
    144a:	ba 00 37    	bra       0x15c0 <.L13>

0000144c <.L12>:
    } else if (U1IRbits.SOFIF) {
    144c:	50 24 80    	mov.w     0x48a, w0
    144e:	64 00 60    	and.w     w0, #0x4, w0
    1450:	00 00 e0    	cp0.w     w0
    1452:	03 00 32    	bra       Z, 0x145a <.L14>
        U1IR = U1IR_SOFIF;                  // clear SOFIF
    1454:	40 00 20    	mov.w     #0x4, w0
    1456:	50 24 88    	mov.w     w0, 0x48a
    1458:	b3 00 37    	bra       0x15c0 <.L13>

0000145a <.L14>:
    } else if (U1IRbits.IDLEIF) {
    145a:	50 24 80    	mov.w     0x48a, w0
    145c:	70 00 60    	and.w     w0, #0x10, w0
    145e:	00 00 e0    	cp0.w     w0
    1460:	03 00 32    	bra       Z, 0x1468 <.L15>
        U1IR = U1IR_IDLEIF;                 // clear IDLEIF
    1462:	00 01 20    	mov.w     #0x10, w0
    1464:	50 24 88    	mov.w     w0, 0x48a
    1466:	ac 00 37    	bra       0x15c0 <.L13>

00001468 <.L15>:
//      U1PWRCbits.USUSPND = 1;             // put USB module in suspend mode
    } else if (U1IRbits.RESUMEIF) {
    1468:	51 24 80    	mov.w     0x48a, w1
    146a:	00 02 20    	mov.w     #0x20, w0
    146c:	00 80 60    	and.w     w1, w0, w0
    146e:	00 00 e0    	cp0.w     w0
    1470:	03 00 32    	bra       Z, 0x1478 <.L16>
        U1IR = U1IR_RESUMEIF;               // clear RESUMEIF
    1472:	00 02 20    	mov.w     #0x20, w0
    1474:	50 24 88    	mov.w     w0, 0x48a
    1476:	a4 00 37    	bra       0x15c0 <.L13>

00001478 <.L16>:
//      U1PWRCbits.USUSPND = 0;             // resume USB module operation
    } else if (U1IRbits.STALLIF) {
    1478:	51 24 80    	mov.w     0x48a, w1
    147a:	00 08 20    	mov.w     #0x80, w0
    147c:	00 80 60    	and.w     w1, w0, w0
    147e:	00 00 e0    	cp0.w     w0
    1480:	03 00 32    	bra       Z, 0x1488 <.L17>
        U1IR = U1IR_STALLIF;                // clear STALLIF
    1482:	00 08 20    	mov.w     #0x80, w0
    1484:	50 24 88    	mov.w     w0, 0x48a
    1486:	9c 00 37    	bra       0x15c0 <.L13>

00001488 <.L17>:
    } else if (U1IRbits.URSTIF) {
    1488:	50 24 80    	mov.w     0x48a, w0
    148a:	61 00 60    	and.w     w0, #0x1, w0
    148c:	00 00 e0    	cp0.w     w0
    148e:	27 00 32    	bra       Z, 0x14de <.L18>
        USB_curr_config = 0;
    1490:	0d 68 ef    	clr.b     0x80d
        while (U1IRbits.TRNIF) {
    1492:	08 00 37    	bra       0x14a4 <.L19>

00001494 <.L20>:
            U1IR = U1IR_TRNIF;              // clear TRNIF to advance the U1STAT FIFO
    1494:	80 00 20    	mov.w     #0x8, w0
    1496:	50 24 88    	mov.w     w0, 0x48a
	...

000014a4 <.L19>:
    14a4:	50 24 80    	mov.w     0x48a, w0
    14a6:	68 00 60    	and.w     w0, #0x8, w0
    14a8:	00 00 e0    	cp0.w     w0
    14aa:	f4 ff 3a    	bra       NZ, 0x1494 <.L20>
            __builtin_nop();                // wait for six instruction cycles...
            __builtin_nop();
            __builtin_nop();
            __builtin_nop();
            __builtin_nop();
            __builtin_nop();                // ...to allow a pending TRNIF to appear
        }
        usb_disable_endpoints(0);           // disable all endpoints
    14ac:	00 40 eb    	clr.b     w0
    14ae:	5d ff 07    	rcall     0x136a <_usb_disable_endpoints> <.L0> <.LFB0> <.Ltext0>
        BD[EP0OUT].bytecount = MAX_PACKET_SIZE;
    14b0:	00 a0 20    	mov.w     #0xa00, w0
    14b2:	01 c4 b3    	mov.b     #0x40, w1
    14b4:	01 48 78    	mov.b     w1, [w0]
        BD[EP0OUT].address = EP0_OUT_buffer;    // EP0 OUT gets a buffer
    14b6:	20 8b 20    	mov.w     #0x8b2, w0
    14b8:	10 50 88    	mov.w     w0, 0xa02
        BD[EP0OUT].status = UOWN | DTSEN;   // set UOWN bit (USB can write)
    14ba:	10 a0 20    	mov.w     #0xa01, w0
    14bc:	81 c8 b3    	mov.b     #0x88, w1
    14be:	01 48 78    	mov.b     w1, [w0]
        BD[EP0IN].address = EP0_IN_buffer;  // EP0 IN gets a buffer
    14c0:	20 8f 20    	mov.w     #0x8f2, w0
    14c2:	30 50 88    	mov.w     w0, 0xa06
        BD[EP0IN].status = DTSEN;           // clear UOWN bit (MCU can write)
    14c4:	50 a0 20    	mov.w     #0xa05, w0
    14c6:	81 c0 b3    	mov.b     #0x8, w1
    14c8:	01 48 78    	mov.b     w1, [w0]
        U1ADDR = 0;                         // set USB Address to 0
    14ca:	96 24 ef    	clr.w     0x496
        U1IR = 0xFF;                        // clear all the USB interrupt flags
    14cc:	f0 0f 20    	mov.w     #0xff, w0
    14ce:	50 24 88    	mov.w     w0, 0x48a
        U1EP0 = ENDPT_CONTROL;              // EP0 is a control pipe and requires an ACK
    14d0:	d0 00 20    	mov.w     #0xd, w0
    14d2:	50 25 88    	mov.w     w0, 0x4aa
//      U1EIE = 0x00FF;                     // enable all USB error interrupts
        USB_USWSTAT = DEFAULT_STATE;
    14d4:	10 c0 b3    	mov.b     #0x1, w0
    14d6:	10 e8 b7    	mov.b     WREG, 0x810
        USB_device_status = 1;              // self powered, remote wakeup disabled
    14d8:	10 c0 b3    	mov.b     #0x1, w0
    14da:	0e e8 b7    	mov.b     WREG, 0x80e
    14dc:	71 00 37    	bra       0x15c0 <.L13>

000014de <.L18>:
    } else if (U1IRbits.TRNIF) {
    14de:	50 24 80    	mov.w     0x48a, w0
    14e0:	68 00 60    	and.w     w0, #0x8, w0
    14e2:	00 00 e0    	cp0.w     w0
    14e4:	6d 00 32    	bra       Z, 0x15c0 <.L13>
        buf_desc_ptr = &BD[U1STAT >> 3];    // ENDPT and DIR bits of U1STAT provide the offset into the buffer descriptor table
    14e6:	90 24 80    	mov.w     0x492, w0
    14e8:	43 00 de    	lsr.w     w0, #0x3, w0
    14ea:	c2 00 dd    	sl.w      w0, #0x2, w1
    14ec:	00 a0 20    	mov.w     #0xa00, w0
    14ee:	00 8f 40    	add.w     w1, w0, [w14]
        USB_buffer_desc.status = buf_desc_ptr->status;
    14f0:	1e 00 78    	mov.w     [w14], w0
    14f2:	10 40 90    	mov.b     [w0+1], w0
    14f4:	01 e8 b7    	mov.b     WREG, 0x801
        USB_buffer_desc.bytecount = buf_desc_ptr->bytecount;
    14f6:	1e 00 78    	mov.w     [w14], w0
    14f8:	10 40 78    	mov.b     [w0], w0
    14fa:	00 e8 b7    	mov.b     WREG, 0x800
        USB_buffer_desc.address = buf_desc_ptr->address;
    14fc:	1e 00 78    	mov.w     [w14], w0
    14fe:	10 00 90    	mov.w     [w0+2], w0
    1500:	10 40 88    	mov.w     w0, 0x802
        USB_USTAT = U1STAT;                 // save the USB status register
    1502:	90 24 80    	mov.w     0x492, w0
    1504:	00 40 78    	mov.b     w0, w0
    1506:	0f e8 b7    	mov.b     WREG, 0x80f
        U1IR = U1IR_TRNIF;                  // clear TRNIF
    1508:	80 00 20    	mov.w     #0x8, w0
    150a:	50 24 88    	mov.w     w0, 0x48a
        USB_error_flags = 0;                // clear USB error flags
    150c:	0c 68 ef    	clr.b     0x80c
        switch (USB_buffer_desc.status & 0x3C) {    // extract PID bits
    150e:	01 c8 bf    	mov.b     0x801, WREG
    1510:	80 80 fb    	ze        w0, w1
    1512:	c0 03 20    	mov.w     #0x3c, w0
    1514:	00 80 60    	and.w     w1, w0, w0
    1516:	41 02 20    	mov.w     #0x24, w1
    1518:	81 0f 50    	sub.w     w0, w1, [w15]
    151a:	08 00 32    	bra       Z, 0x152c <.L23>
    151c:	41 03 20    	mov.w     #0x34, w1
    151e:	81 0f 50    	sub.w     w0, w1, [w15]
    1520:	03 00 32    	bra       Z, 0x1528 <.L24>
    1522:	e4 0f 50    	sub.w     w0, #0x4, [w15]
    1524:	17 00 32    	bra       Z, 0x1554 <.L22>
    1526:	3d 00 37    	bra       0x15a2 <.L21>

00001528 <.L24>:
            case TOKEN_SETUP:
                usb_process_setup_token();
    1528:	4e 00 07    	rcall     0x15c6 <_usb_process_setup_token> <.LFB4> <.LFE3>
                break;
    152a:	3b 00 37    	bra       0x15a2 <.L21>

0000152c <.L23>:
            case TOKEN_IN:
                ep = (USB_USTAT >> 4) & 0x0F;
    152c:	0f c8 bf    	mov.b     0x80f, WREG
    152e:	00 80 fb    	ze        w0, w0
    1530:	44 00 de    	lsr.w     w0, #0x4, w0
    1532:	20 47 98    	mov.b     w0, [w14+2]
                if (USB_in_callbacks[ep])
    1534:	2e 40 90    	mov.b     [w14+2], w0
    1536:	00 80 fb    	ze        w0, w0
    1538:	80 00 40    	add.w     w0, w0, w1
    153a:	00 94 20    	mov.w     #0x940, w0
    153c:	00 80 40    	add.w     w1, w0, w0
    153e:	10 00 78    	mov.w     [w0], w0
    1540:	00 00 e0    	cp0.w     w0
    1542:	2e 00 32    	bra       Z, 0x15a0 <.L27>
                    USB_in_callbacks[ep]();
    1544:	2e 40 90    	mov.b     [w14+2], w0
    1546:	00 80 fb    	ze        w0, w0
    1548:	80 00 40    	add.w     w0, w0, w1
    154a:	00 94 20    	mov.w     #0x940, w0
    154c:	00 80 40    	add.w     w1, w0, w0
    154e:	10 00 78    	mov.w     [w0], w0
    1550:	00 00 01    	call      w0
                break;
    1552:	27 00 37    	bra       0x15a2 <.L21>

00001554 <.L22>:
            case TOKEN_OUT:
                ep = (USB_USTAT >> 4) & 0x0F;
    1554:	0f c8 bf    	mov.b     0x80f, WREG
    1556:	00 80 fb    	ze        w0, w0
    1558:	44 00 de    	lsr.w     w0, #0x4, w0
    155a:	20 47 98    	mov.b     w0, [w14+2]
                if (USB_out_callbacks[ep])
    155c:	2e 40 90    	mov.b     [w14+2], w0
    155e:	00 80 fb    	ze        w0, w0
    1560:	80 00 40    	add.w     w0, w0, w1
    1562:	00 96 20    	mov.w     #0x960, w0
    1564:	00 80 40    	add.w     w1, w0, w0
    1566:	10 00 78    	mov.w     [w0], w0
    1568:	00 00 e0    	cp0.w     w0
    156a:	07 00 32    	bra       Z, 0x157a <.L26>
                    USB_out_callbacks[ep]();
    156c:	2e 40 90    	mov.b     [w14+2], w0
    156e:	00 80 fb    	ze        w0, w0
    1570:	80 00 40    	add.w     w0, w0, w1
    1572:	00 96 20    	mov.w     #0x960, w0
    1574:	00 80 40    	add.w     w1, w0, w0
    1576:	10 00 78    	mov.w     [w0], w0
    1578:	00 00 01    	call      w0

0000157a <.L26>:
                if ((ep == 0) && (USB_request.bytes_left.w == 0)) {
    157a:	2e 40 90    	mov.b     [w14+2], w0
    157c:	00 04 e0    	cp0.b     w0
    157e:	11 00 3a    	bra       NZ, 0x15a2 <.L21>
    1580:	e0 49 80    	mov.w     0x93c, w0
    1582:	00 00 e0    	cp0.w     w0
    1584:	0e 00 3a    	bra       NZ, 0x15a2 <.L21>
                    BD[EP0OUT].bytecount = MAX_PACKET_SIZE; // reset EP0 OUT buffer
    1586:	00 a0 20    	mov.w     #0xa00, w0
    1588:	01 c4 b3    	mov.b     #0x40, w1
    158a:	01 48 78    	mov.b     w1, [w0]
                    BD[EP0OUT].status = UOWN | DTSEN;
    158c:	10 a0 20    	mov.w     #0xa01, w0
    158e:	81 c8 b3    	mov.b     #0x88, w1
    1590:	01 48 78    	mov.b     w1, [w0]
                    BD[EP0IN].bytecount = 0;                // complete status phase of control transfer
    1592:	40 a0 20    	mov.w     #0xa04, w0
    1594:	80 40 eb    	clr.b     w1
    1596:	01 48 78    	mov.b     w1, [w0]
                    BD[EP0IN].status = UOWN | DTS | DTSEN;  // send packet as DATA1, set UOWN bit
    1598:	50 a0 20    	mov.w     #0xa05, w0
    159a:	81 cc b3    	mov.b     #0xc8, w1
    159c:	01 48 78    	mov.b     w1, [w0]
    159e:	01 00 37    	bra       0x15a2 <.L21>

000015a0 <.L27>:
    15a0:	00 00 00    	nop       

000015a2 <.L21>:
                }
        }
        if (USB_error_flags & REQUEST_ERROR) {      // if there was a Request Error...
    15a2:	0c c8 bf    	mov.b     0x80c, WREG
    15a4:	00 80 fb    	ze        w0, w0
    15a6:	61 00 60    	and.w     w0, #0x1, w0
    15a8:	00 40 78    	mov.b     w0, w0
    15aa:	00 04 e0    	cp0.b     w0
    15ac:	09 00 32    	bra       Z, 0x15c0 <.L13>
            BD[EP0OUT].bytecount = MAX_PACKET_SIZE; // ...get ready to receive the next Setup token...
    15ae:	00 a0 20    	mov.w     #0xa00, w0
    15b0:	01 c4 b3    	mov.b     #0x40, w1
    15b2:	01 48 78    	mov.b     w1, [w0]
            BD[EP0IN].status = UOWN | BSTALL;
    15b4:	50 a0 20    	mov.w     #0xa05, w0
    15b6:	41 c8 b3    	mov.b     #0x84, w1
    15b8:	01 48 78    	mov.b     w1, [w0]
            BD[EP0OUT].status = UOWN | BSTALL;      // ...and issue a protocol stall on EP0
    15ba:	10 a0 20    	mov.w     #0xa01, w0
    15bc:	41 c8 b3    	mov.b     #0x84, w1
    15be:	01 48 78    	mov.b     w1, [w0]

000015c0 <.L13>:
        }
    }
    IFS5bits.USB1IF = 0;                    // clear USB Interrupt flag
    15c0:	8e c0 a9    	bclr.b    0x8e, #0x6
}
    15c2:	00 80 fa    	ulnk      
    15c4:	00 00 06    	return    

000015c6 <_usb_process_setup_token>:

void usb_process_setup_token(void) {
    15c6:	02 00 fa    	lnk       #0x2
    uint8_t *buf_ptr;

    buf_ptr = USB_buffer_desc.address;
    15c8:	11 40 80    	mov.w     0x802, w1
    15ca:	01 0f 78    	mov.w     w1, [w14]
    USB_setup.bmRequestType = *buf_ptr++;           // copy the setup packet received from the host
    15cc:	1e 00 78    	mov.w     [w14], w0
    15ce:	90 40 78    	mov.b     [w0], w1
    15d0:	40 80 20    	mov.w     #0x804, w0
    15d2:	01 48 78    	mov.b     w1, [w0]
    15d4:	1e 0f e8    	inc.w     [w14], [w14]
    USB_setup.bRequest = *buf_ptr++;
    15d6:	1e 00 78    	mov.w     [w14], w0
    15d8:	90 40 78    	mov.b     [w0], w1
    15da:	40 80 20    	mov.w     #0x804, w0
    15dc:	11 40 98    	mov.b     w1, [w0+1]
    15de:	1e 0f e8    	inc.w     [w14], [w14]
    USB_setup.wValue.b[0] = *buf_ptr++;
    15e0:	1e 00 78    	mov.w     [w14], w0
    15e2:	90 40 78    	mov.b     [w0], w1
    15e4:	40 80 20    	mov.w     #0x804, w0
    15e6:	21 40 98    	mov.b     w1, [w0+2]
    15e8:	1e 0f e8    	inc.w     [w14], [w14]
    USB_setup.wValue.b[1] = *buf_ptr++;
    15ea:	1e 00 78    	mov.w     [w14], w0
    15ec:	90 40 78    	mov.b     [w0], w1
    15ee:	40 80 20    	mov.w     #0x804, w0
    15f0:	31 40 98    	mov.b     w1, [w0+3]
    15f2:	1e 0f e8    	inc.w     [w14], [w14]
    USB_setup.wIndex.b[0] = *buf_ptr++;
    15f4:	1e 00 78    	mov.w     [w14], w0
    15f6:	90 40 78    	mov.b     [w0], w1
    15f8:	40 80 20    	mov.w     #0x804, w0
    15fa:	41 40 98    	mov.b     w1, [w0+4]
    15fc:	1e 0f e8    	inc.w     [w14], [w14]
    USB_setup.wIndex.b[1] = *buf_ptr++;
    15fe:	1e 00 78    	mov.w     [w14], w0
    1600:	90 40 78    	mov.b     [w0], w1
    1602:	40 80 20    	mov.w     #0x804, w0
    1604:	51 40 98    	mov.b     w1, [w0+5]
    1606:	1e 0f e8    	inc.w     [w14], [w14]
    USB_setup.wLength.b[0] = *buf_ptr++;
    1608:	1e 00 78    	mov.w     [w14], w0
    160a:	90 40 78    	mov.b     [w0], w1
    160c:	40 80 20    	mov.w     #0x804, w0
    160e:	61 40 98    	mov.b     w1, [w0+6]
    1610:	1e 0f e8    	inc.w     [w14], [w14]
    USB_setup.wLength.b[1] = *buf_ptr++;
    1612:	1e 00 78    	mov.w     [w14], w0
    1614:	90 40 78    	mov.b     [w0], w1
    1616:	40 80 20    	mov.w     #0x804, w0
    1618:	71 40 98    	mov.b     w1, [w0+7]
    161a:	1e 0f e8    	inc.w     [w14], [w14]
    BD[EP0OUT].bytecount = MAX_PACKET_SIZE;         // reset the EP0 OUT byte count
    161c:	00 a0 20    	mov.w     #0xa00, w0
    161e:	01 c4 b3    	mov.b     #0x40, w1
    1620:	01 48 78    	mov.b     w1, [w0]
    BD[EP0IN].status = DTSEN;                       // return the EP0 IN buffer to us (dequeue any pending requests)
    1622:	50 a0 20    	mov.w     #0xa05, w0
    1624:	81 c0 b3    	mov.b     #0x8, w1
    1626:	01 48 78    	mov.b     w1, [w0]
    BD[EP0OUT].status = (!(USB_setup.bmRequestType & UOWN) && (USB_setup.wLength.w)) ? UOWN | DTS | DTSEN:0x88;    // set EP0 OUT UOWN back to USB and DATA0/DATA1 packet according to the request type
    1628:	40 80 20    	mov.w     #0x804, w0
    162a:	10 40 78    	mov.b     [w0], w0
    162c:	00 04 e0    	cp0.b     w0
    162e:	06 00 35    	bra       LT, 0x163c <.L29>
    1630:	40 80 20    	mov.w     #0x804, w0
    1632:	30 00 90    	mov.w     [w0+6], w0
    1634:	00 00 e0    	cp0.w     w0
    1636:	02 00 32    	bra       Z, 0x163c <.L29>
    1638:	80 cc b3    	mov.b     #0xc8, w0
    163a:	01 00 37    	bra       0x163e <.L30>

0000163c <.L29>:
    163c:	80 c8 b3    	mov.b     #0x88, w0

0000163e <.L30>:
    163e:	11 a0 20    	mov.w     #0xa01, w1
    1640:	80 48 78    	mov.b     w0, [w1]
    U1CONbits.PKTDIS = 0;                           // assuming there is nothing to dequeue, clear the packet disable bit
    1642:	94 a4 a9    	bclr.b    0x494, #0x5
    USB_request.setup.bmRequestType = NO_REQUEST;   // clear the device request in process
    1644:	20 93 20    	mov.w     #0x932, w0
    1646:	80 c0 eb    	setm.b    w1
    1648:	01 48 78    	mov.b     w1, [w0]
    USB_request.setup.bRequest = NO_REQUEST;
    164a:	30 93 20    	mov.w     #0x933, w0
    164c:	80 c0 eb    	setm.b    w1
    164e:	01 48 78    	mov.b     w1, [w0]
    USB_request.bytes_left.w = 0;
    1650:	00 00 eb    	clr.w     w0
    1652:	e0 49 88    	mov.w     w0, 0x93c
    USB_request.done_callback = (USB_CALLBACK_T)NULL;
    1654:	00 00 eb    	clr.w     w0
    1656:	f0 49 88    	mov.w     w0, 0x93e
    switch (USB_setup.bmRequestType & 0x60) {       // extract request type bits
    1658:	40 80 20    	mov.w     #0x804, w0
    165a:	10 40 78    	mov.b     [w0], w0
    165c:	80 80 fb    	ze        w0, w1
    165e:	00 06 20    	mov.w     #0x60, w0
    1660:	00 80 60    	and.w     w1, w0, w0
    1662:	01 02 20    	mov.w     #0x20, w1
    1664:	81 0f 50    	sub.w     w0, w1, [w15]
    1666:	11 00 32    	bra       Z, 0x168a <.L33>
    1668:	01 04 20    	mov.w     #0x40, w1
    166a:	81 0f 50    	sub.w     w0, w1, [w15]
    166c:	04 00 32    	bra       Z, 0x1676 <.L34>
    166e:	00 00 e0    	cp0.w     w0
    1670:	16 00 3a    	bra       NZ, 0x169e <.L40>
        case STANDARD_REQ:
            usb_standard_requests();
    1672:	1a 00 07    	rcall     0x16a8 <_usb_standard_requests> <.LFB5> <.LFE4>
            break;
    1674:	17 00 37    	bra       0x16a4 <.L28>

00001676 <.L34>:
        case VENDOR_REQ:
            if (USB_setup_vendor_callback)
    1676:	c0 40 80    	mov.w     0x818, w0
    1678:	00 00 e0    	cp0.w     w0
    167a:	03 00 32    	bra       Z, 0x1682 <.L36>
                USB_setup_vendor_callback();
    167c:	c0 40 80    	mov.w     0x818, w0
    167e:	00 00 01    	call      w0
            else
                USB_error_flags |= REQUEST_ERROR;
            break;
    1680:	11 00 37    	bra       0x16a4 <.L28>

00001682 <.L36>:
    1682:	0c c8 bf    	mov.b     0x80c, WREG
    1684:	00 04 a0    	bset.b    w0, #0x0
    1686:	0c e8 b7    	mov.b     WREG, 0x80c
    1688:	0d 00 37    	bra       0x16a4 <.L28>

0000168a <.L33>:
        case CLASS_REQ:
            if (USB_setup_class_callback)
    168a:	b0 40 80    	mov.w     0x816, w0
    168c:	00 00 e0    	cp0.w     w0
    168e:	03 00 32    	bra       Z, 0x1696 <.L38>
                USB_setup_class_callback();
    1690:	b0 40 80    	mov.w     0x816, w0
    1692:	00 00 01    	call      w0
            else
                USB_error_flags |= REQUEST_ERROR;
            break;
    1694:	07 00 37    	bra       0x16a4 <.L28>

00001696 <.L38>:
    1696:	0c c8 bf    	mov.b     0x80c, WREG
    1698:	00 04 a0    	bset.b    w0, #0x0
    169a:	0c e8 b7    	mov.b     WREG, 0x80c
    169c:	03 00 37    	bra       0x16a4 <.L28>

0000169e <.L40>:
        default:
            USB_error_flags |= REQUEST_ERROR;
    169e:	0c c8 bf    	mov.b     0x80c, WREG
    16a0:	00 04 a0    	bset.b    w0, #0x0
    16a2:	0c e8 b7    	mov.b     WREG, 0x80c

000016a4 <.L28>:
    }
}
    16a4:	00 80 fa    	ulnk      
    16a6:	00 00 06    	return    

000016a8 <_usb_standard_requests>:

void usb_standard_requests(void) {
    16a8:	06 00 fa    	lnk       #0x6
    BUFDESC *buf_desc_ptr;
    uint16_t *U1EP;
    uint8_t ep;

    switch (USB_setup.bRequest) {
    16aa:	40 80 20    	mov.w     #0x804, w0
    16ac:	10 40 90    	mov.b     [w0+1], w0
    16ae:	00 80 fb    	ze        w0, w0
    16b0:	e6 0f 50    	sub.w     w0, #0x6, [w15]
    16b2:	bc 01 32    	bra       Z, 0x1a2c <.L46>
    16b4:	e6 0f 50    	sub.w     w0, #0x6, [w15]
    16b6:	0c 00 3c    	bra       GT, 0x16d0 <.L51>
    16b8:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    16ba:	c1 00 32    	bra       Z, 0x183e <.L44>
    16bc:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    16be:	03 00 3c    	bra       GT, 0x16c6 <.L52>
    16c0:	00 00 e0    	cp0.w     w0
    16c2:	12 00 32    	bra       Z, 0x16e8 <.L43>
    16c4:	87 02 37    	bra       0x1bd4 <.L42>

000016c6 <.L52>:
    16c6:	e3 0f 50    	sub.w     w0, #0x3, [w15]
    16c8:	ba 00 32    	bra       Z, 0x183e <.L44>
    16ca:	e5 0f 50    	sub.w     w0, #0x5, [w15]
    16cc:	8d 01 32    	bra       Z, 0x19e8 <.L45>
    16ce:	82 02 37    	bra       0x1bd4 <.L42>

000016d0 <.L51>:
    16d0:	e9 0f 50    	sub.w     w0, #0x9, [w15]
    16d2:	22 02 32    	bra       Z, 0x1b18 <.L48>
    16d4:	e9 0f 50    	sub.w     w0, #0x9, [w15]
    16d6:	03 00 3c    	bra       GT, 0x16de <.L53>
    16d8:	e8 0f 50    	sub.w     w0, #0x8, [w15]
    16da:	13 02 32    	bra       Z, 0x1b02 <.L47>
    16dc:	7b 02 37    	bra       0x1bd4 <.L42>

000016de <.L53>:
    16de:	ea 0f 50    	sub.w     w0, #0xa, [w15]
    16e0:	3d 02 32    	bra       Z, 0x1b5c <.L49>
    16e2:	eb 0f 50    	sub.w     w0, #0xb, [w15]
    16e4:	56 02 32    	bra       Z, 0x1b92 <.L50>
    16e6:	76 02 37    	bra       0x1bd4 <.L42>

000016e8 <.L43>:
        case GET_STATUS:
            switch (USB_setup.bmRequestType & 0x1F) {   // extract request recipient bits
    16e8:	40 80 20    	mov.w     #0x804, w0
    16ea:	10 40 78    	mov.b     [w0], w0
    16ec:	00 80 fb    	ze        w0, w0
    16ee:	7f 00 60    	and.w     w0, #0x1f, w0
    16f0:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    16f2:	13 00 32    	bra       Z, 0x171a <.L56>
    16f4:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    16f6:	32 00 32    	bra       Z, 0x175c <.L57>
    16f8:	00 00 e0    	cp0.w     w0
    16fa:	9c 00 3a    	bra       NZ, 0x1834 <.L133>
                case RECIPIENT_DEVICE:
                    BD[EP0IN].address[0] = USB_device_status;
    16fc:	30 50 80    	mov.w     0xa06, w0
    16fe:	e1 80 20    	mov.w     #0x80e, w1
    1700:	91 40 78    	mov.b     [w1], w1
    1702:	01 48 78    	mov.b     w1, [w0]
                    BD[EP0IN].address[1] = 0;
    1704:	30 50 80    	mov.w     0xa06, w0
    1706:	00 00 e8    	inc.w     w0, w0
    1708:	80 40 eb    	clr.b     w1
    170a:	01 48 78    	mov.b     w1, [w0]
                    BD[EP0IN].bytecount = 2;
    170c:	40 a0 20    	mov.w     #0xa04, w0
    170e:	21 c0 b3    	mov.b     #0x2, w1
    1710:	01 48 78    	mov.b     w1, [w0]
                    BD[EP0IN].status = UOWN | DTS | DTSEN;  // send packet as DATA1, set UOWN bit
    1712:	50 a0 20    	mov.w     #0xa05, w0
    1714:	81 cc b3    	mov.b     #0xc8, w1
    1716:	01 48 78    	mov.b     w1, [w0]
                    break;
    1718:	91 00 37    	bra       0x183c <.L58>

0000171a <.L56>:
                case RECIPIENT_INTERFACE:
                    switch (USB_USWSTAT) {
    171a:	10 c8 bf    	mov.b     0x810, WREG
    171c:	00 80 fb    	ze        w0, w0
    171e:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    1720:	03 00 32    	bra       Z, 0x1728 <.L60>
    1722:	e3 0f 50    	sub.w     w0, #0x3, [w15]
    1724:	05 00 32    	bra       Z, 0x1730 <.L61>
    1726:	19 00 37    	bra       0x175a <.L59>

00001728 <.L60>:
                        case ADDRESS_STATE:
                            USB_error_flags |= REQUEST_ERROR;
    1728:	0c c8 bf    	mov.b     0x80c, WREG
    172a:	00 04 a0    	bset.b    w0, #0x0
    172c:	0c e8 b7    	mov.b     WREG, 0x80c
                            break;
    172e:	15 00 37    	bra       0x175a <.L59>

00001730 <.L61>:
                        case CONFIG_STATE:
                            if (USB_setup.wIndex.b[0] < NUM_INTERFACES) {
    1730:	40 80 20    	mov.w     #0x804, w0
    1732:	40 40 90    	mov.b     [w0+4], w0
    1734:	00 04 e0    	cp0.b     w0
    1736:	0e 00 3a    	bra       NZ, 0x1754 <.L62>
                                BD[EP0IN].address[0] = 0;
    1738:	30 50 80    	mov.w     0xa06, w0
    173a:	80 40 eb    	clr.b     w1
    173c:	01 48 78    	mov.b     w1, [w0]
                                BD[EP0IN].address[1] = 0;
    173e:	30 50 80    	mov.w     0xa06, w0
    1740:	00 00 e8    	inc.w     w0, w0
    1742:	80 40 eb    	clr.b     w1
    1744:	01 48 78    	mov.b     w1, [w0]
                                BD[EP0IN].bytecount = 2;
    1746:	40 a0 20    	mov.w     #0xa04, w0
    1748:	21 c0 b3    	mov.b     #0x2, w1
    174a:	01 48 78    	mov.b     w1, [w0]
                                BD[EP0IN].status = UOWN | DTS | DTSEN;  // send packet as DATA1, set UOWN bit
    174c:	50 a0 20    	mov.w     #0xa05, w0
    174e:	81 cc b3    	mov.b     #0xc8, w1
    1750:	01 48 78    	mov.b     w1, [w0]
    1752:	03 00 37    	bra       0x175a <.L59>

00001754 <.L62>:
                            } else {
                                USB_error_flags |= REQUEST_ERROR;
    1754:	0c c8 bf    	mov.b     0x80c, WREG
    1756:	00 04 a0    	bset.b    w0, #0x0
    1758:	0c e8 b7    	mov.b     WREG, 0x80c

0000175a <.L59>:
                            }
                    }
                    break;
    175a:	70 00 37    	bra       0x183c <.L58>

0000175c <.L57>:
                case RECIPIENT_ENDPOINT:
                    switch (USB_USWSTAT) {
    175c:	10 c8 bf    	mov.b     0x810, WREG
    175e:	00 80 fb    	ze        w0, w0
    1760:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    1762:	03 00 32    	bra       Z, 0x176a <.L64>
    1764:	e3 0f 50    	sub.w     w0, #0x3, [w15]
    1766:	29 00 32    	bra       Z, 0x17ba <.L65>
    1768:	61 00 37    	bra       0x182c <.L134>

0000176a <.L64>:
                        case ADDRESS_STATE:
                            if (!(USB_setup.wIndex.b[0] & 0x0F)) {  // get EP, strip off direction bit and see if it is EP0
    176a:	40 80 20    	mov.w     #0x804, w0
    176c:	40 40 90    	mov.b     [w0+4], w0
    176e:	00 80 fb    	ze        w0, w0
    1770:	6f 00 60    	and.w     w0, #0xf, w0
    1772:	00 00 e0    	cp0.w     w0
    1774:	1e 00 3a    	bra       NZ, 0x17b2 <.L66>
                                BD[EP0IN].address[0] = (((USB_setup.wIndex.b[0] & 0x80) ? BD[EP0IN].status : BD[EP0OUT].status) & 0x04) >> 2;   // return the BSTALL bit of EP0 IN or OUT, whichever was requested
    1776:	31 50 80    	mov.w     0xa06, w1
    1778:	40 80 20    	mov.w     #0x804, w0
    177a:	40 40 90    	mov.b     [w0+4], w0
    177c:	00 04 e0    	cp0.b     w0
    177e:	07 00 3d    	bra       GE, 0x178e <.L67>
    1780:	50 a0 20    	mov.w     #0xa05, w0
    1782:	10 40 78    	mov.b     [w0], w0
    1784:	00 80 fb    	ze        w0, w0
    1786:	64 00 60    	and.w     w0, #0x4, w0
    1788:	42 80 de    	asr.w     w0, #0x2, w0
    178a:	00 40 78    	mov.b     w0, w0
    178c:	06 00 37    	bra       0x179a <.L68>

0000178e <.L67>:
    178e:	10 a0 20    	mov.w     #0xa01, w0
    1790:	10 40 78    	mov.b     [w0], w0
    1792:	00 80 fb    	ze        w0, w0
    1794:	64 00 60    	and.w     w0, #0x4, w0
    1796:	42 80 de    	asr.w     w0, #0x2, w0
    1798:	00 40 78    	mov.b     w0, w0

0000179a <.L68>:
    179a:	80 48 78    	mov.b     w0, [w1]
                                BD[EP0IN].address[1] = 0;
    179c:	30 50 80    	mov.w     0xa06, w0
    179e:	00 00 e8    	inc.w     w0, w0
    17a0:	80 40 eb    	clr.b     w1
    17a2:	01 48 78    	mov.b     w1, [w0]
                                BD[EP0IN].bytecount = 2;
    17a4:	40 a0 20    	mov.w     #0xa04, w0
    17a6:	21 c0 b3    	mov.b     #0x2, w1
    17a8:	01 48 78    	mov.b     w1, [w0]
                                BD[EP0IN].status = UOWN | DTS | DTSEN;  // send packet as DATA1, set UOWN bit
    17aa:	50 a0 20    	mov.w     #0xa05, w0
    17ac:	81 cc b3    	mov.b     #0xc8, w1
    17ae:	01 48 78    	mov.b     w1, [w0]
    17b0:	03 00 37    	bra       0x17b8 <.L69>

000017b2 <.L66>:
                            } else {
                                USB_error_flags |= REQUEST_ERROR;
    17b2:	0c c8 bf    	mov.b     0x80c, WREG
    17b4:	00 04 a0    	bset.b    w0, #0x0
    17b6:	0c e8 b7    	mov.b     WREG, 0x80c

000017b8 <.L69>:
                            }
                            break;
    17b8:	3c 00 37    	bra       0x1832 <.L70>

000017ba <.L65>:
                        case CONFIG_STATE:
                            U1EP = (uint16_t *)&U1EP0;
    17ba:	a0 4a 20    	mov.w     #0x4aa, w0
    17bc:	00 0f 78    	mov.w     w0, [w14]
                            ep = USB_setup.wIndex.b[0] & 0x0F;  // get EP and strip off direction bit for offset from U1EP0
    17be:	40 80 20    	mov.w     #0x804, w0
    17c0:	40 40 90    	mov.b     [w0+4], w0
    17c2:	6f 40 60    	and.b     w0, #0xf, w0
    17c4:	20 47 98    	mov.b     w0, [w14+2]
                            buf_desc_ptr = &BD[EP0OUT] + ((ep << 1) | ((USB_setup.wIndex.b[0] & 0x80) ? 0x01 : 0x00));  // compute pointer to the buffer descriptor for the specified EP
    17c6:	2e 40 90    	mov.b     [w14+2], w0
    17c8:	00 80 fb    	ze        w0, w0
    17ca:	00 00 40    	add.w     w0, w0, w0
    17cc:	80 00 78    	mov.w     w0, w1
    17ce:	40 80 20    	mov.w     #0x804, w0
    17d0:	40 40 90    	mov.b     [w0+4], w0
    17d2:	00 00 fb    	se        w0, w0
    17d4:	4f 00 de    	lsr.w     w0, #0xf, w0
    17d6:	01 00 70    	ior.w     w0, w1, w0
    17d8:	c2 00 dd    	sl.w      w0, #0x2, w1
    17da:	00 a0 20    	mov.w     #0xa00, w0
    17dc:	00 80 40    	add.w     w1, w0, w0
    17de:	20 07 98    	mov.w     w0, [w14+4]
                            if (U1EP[ep] & ((USB_setup.wIndex.b[0] & 0x80) ? 0x04 : 0x08)) {    // if the specified EP is enabled for transfers in the specified direction...
    17e0:	2e 40 90    	mov.b     [w14+2], w0
    17e2:	00 80 fb    	ze        w0, w0
    17e4:	00 00 40    	add.w     w0, w0, w0
    17e6:	1e 00 40    	add.w     w0, [w14], w0
    17e8:	90 00 78    	mov.w     [w0], w1
    17ea:	40 80 20    	mov.w     #0x804, w0
    17ec:	40 40 90    	mov.b     [w0+4], w0
    17ee:	00 04 e0    	cp0.b     w0
    17f0:	02 00 3d    	bra       GE, 0x17f6 <.L71>
    17f2:	40 00 20    	mov.w     #0x4, w0
    17f4:	01 00 37    	bra       0x17f8 <.L72>

000017f6 <.L71>:
    17f6:	80 00 20    	mov.w     #0x8, w0

000017f8 <.L72>:
    17f8:	00 80 60    	and.w     w1, w0, w0
    17fa:	00 00 e0    	cp0.w     w0
    17fc:	13 00 32    	bra       Z, 0x1824 <.L73>
                                BD[EP0IN].address[0] = ((buf_desc_ptr->status) & 0x04) >> 2;    // ...return the BSTALL bit of the specified EP
    17fe:	30 50 80    	mov.w     0xa06, w0
    1800:	ae 00 90    	mov.w     [w14+4], w1
    1802:	91 40 90    	mov.b     [w1+1], w1
    1804:	81 80 fb    	ze        w1, w1
    1806:	e4 80 60    	and.w     w1, #0x4, w1
    1808:	c2 88 de    	asr.w     w1, #0x2, w1
    180a:	81 40 78    	mov.b     w1, w1
    180c:	01 48 78    	mov.b     w1, [w0]
                                BD[EP0IN].address[1] = 0;
    180e:	30 50 80    	mov.w     0xa06, w0
    1810:	00 00 e8    	inc.w     w0, w0
    1812:	80 40 eb    	clr.b     w1
    1814:	01 48 78    	mov.b     w1, [w0]
                                BD[EP0IN].bytecount = 2;
    1816:	40 a0 20    	mov.w     #0xa04, w0
    1818:	21 c0 b3    	mov.b     #0x2, w1
    181a:	01 48 78    	mov.b     w1, [w0]
                                BD[EP0IN].status = UOWN | DTS | DTSEN;  // send packet as DATA1, set UOWN bit
    181c:	50 a0 20    	mov.w     #0xa05, w0
    181e:	81 cc b3    	mov.b     #0xc8, w1
    1820:	01 48 78    	mov.b     w1, [w0]
    1822:	03 00 37    	bra       0x182a <.L74>

00001824 <.L73>:
                            } else {
                                USB_error_flags |= REQUEST_ERROR;
    1824:	0c c8 bf    	mov.b     0x80c, WREG
    1826:	00 04 a0    	bset.b    w0, #0x0
    1828:	0c e8 b7    	mov.b     WREG, 0x80c

0000182a <.L74>:
                            }
                            break;
    182a:	03 00 37    	bra       0x1832 <.L70>

0000182c <.L134>:
                        default:
                            USB_error_flags |= REQUEST_ERROR;
    182c:	0c c8 bf    	mov.b     0x80c, WREG
    182e:	00 04 a0    	bset.b    w0, #0x0
    1830:	0c e8 b7    	mov.b     WREG, 0x80c

00001832 <.L70>:
                    }
                    break;
    1832:	04 00 37    	bra       0x183c <.L58>

00001834 <.L133>:
                default:
                    USB_error_flags |= REQUEST_ERROR;
    1834:	0c c8 bf    	mov.b     0x80c, WREG
    1836:	00 04 a0    	bset.b    w0, #0x0
    1838:	0c e8 b7    	mov.b     WREG, 0x80c
            }
            break;
    183a:	d1 01 37    	bra       0x1bde <.L41>

0000183c <.L58>:
    183c:	d0 01 37    	bra       0x1bde <.L41>

0000183e <.L44>:
        case CLEAR_FEATURE:
        case SET_FEATURE:
            switch (USB_setup.bmRequestType & 0x1F) {       // extract request recipient bits
    183e:	40 80 20    	mov.w     #0x804, w0
    1840:	10 40 78    	mov.b     [w0], w0
    1842:	00 80 fb    	ze        w0, w0
    1844:	7f 00 60    	and.w     w0, #0x1f, w0
    1846:	00 00 e0    	cp0.w     w0
    1848:	03 00 32    	bra       Z, 0x1850 <.L77>
    184a:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    184c:	1e 00 32    	bra       Z, 0x188a <.L78>
    184e:	c7 00 37    	bra       0x19de <.L135>

00001850 <.L77>:
                case RECIPIENT_DEVICE:
                    switch (USB_setup.wValue.b[0]) {
    1850:	40 80 20    	mov.w     #0x804, w0
    1852:	20 40 90    	mov.b     [w0+2], w0
    1854:	00 80 fb    	ze        w0, w0
    1856:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    1858:	14 00 3a    	bra       NZ, 0x1882 <.L136>
                        case DEVICE_REMOTE_WAKEUP:
                            if (USB_setup.bRequest == CLEAR_FEATURE)
    185a:	40 80 20    	mov.w     #0x804, w0
    185c:	10 40 90    	mov.b     [w0+1], w0
    185e:	e1 4f 50    	sub.b     w0, #0x1, [w15]
    1860:	06 00 3a    	bra       NZ, 0x186e <.L81>
                                USB_device_status &= 0xFE;
    1862:	e1 80 20    	mov.w     #0x80e, w1
    1864:	91 40 78    	mov.b     [w1], w1
    1866:	e0 cf b3    	mov.b     #0xfe, w0
    1868:	00 c0 60    	and.b     w1, w0, w0
    186a:	0e e8 b7    	mov.b     WREG, 0x80e
    186c:	03 00 37    	bra       0x1874 <.L82>

0000186e <.L81>:
                            else
                                USB_device_status |= 0x01;
    186e:	0e c8 bf    	mov.b     0x80e, WREG
    1870:	00 04 a0    	bset.b    w0, #0x0
    1872:	0e e8 b7    	mov.b     WREG, 0x80e

00001874 <.L82>:
                            BD[EP0IN].bytecount = 0;
    1874:	40 a0 20    	mov.w     #0xa04, w0
    1876:	80 40 eb    	clr.b     w1
    1878:	01 48 78    	mov.b     w1, [w0]
                            BD[EP0IN].status = UOWN | DTS | DTSEN;  // send packet as DATA1, set UOWN bit
    187a:	50 a0 20    	mov.w     #0xa05, w0
    187c:	81 cc b3    	mov.b     #0xc8, w1
    187e:	01 48 78    	mov.b     w1, [w0]
                            break;
    1880:	03 00 37    	bra       0x1888 <.L83>

00001882 <.L136>:
                        default:
                            USB_error_flags |= REQUEST_ERROR;
    1882:	0c c8 bf    	mov.b     0x80c, WREG
    1884:	00 04 a0    	bset.b    w0, #0x0
    1886:	0c e8 b7    	mov.b     WREG, 0x80c

00001888 <.L83>:
                    }
                    break;
    1888:	ae 00 37    	bra       0x19e6 <.L84>

0000188a <.L78>:
                case RECIPIENT_ENDPOINT:
                    switch (USB_USWSTAT) {
    188a:	10 c8 bf    	mov.b     0x810, WREG
    188c:	00 80 fb    	ze        w0, w0
    188e:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    1890:	03 00 32    	bra       Z, 0x1898 <.L86>
    1892:	e3 0f 50    	sub.w     w0, #0x3, [w15]
    1894:	12 00 32    	bra       Z, 0x18ba <.L87>
    1896:	9f 00 37    	bra       0x19d6 <.L137>

00001898 <.L86>:
                        case ADDRESS_STATE:
                            if (!(USB_setup.wIndex.b[0] & 0x0F)) {  // get EP, strip off direction bit, and see if its EP0
    1898:	40 80 20    	mov.w     #0x804, w0
    189a:	40 40 90    	mov.b     [w0+4], w0
    189c:	00 80 fb    	ze        w0, w0
    189e:	6f 00 60    	and.w     w0, #0xf, w0
    18a0:	00 00 e0    	cp0.w     w0
    18a2:	07 00 3a    	bra       NZ, 0x18b2 <.L88>
                                BD[EP0IN].bytecount = 0;
    18a4:	40 a0 20    	mov.w     #0xa04, w0
    18a6:	80 40 eb    	clr.b     w1
    18a8:	01 48 78    	mov.b     w1, [w0]
                                BD[EP0IN].status = UOWN | DTS | DTSEN;  // send packet as DATA1, set UOWN bit
    18aa:	50 a0 20    	mov.w     #0xa05, w0
    18ac:	81 cc b3    	mov.b     #0xc8, w1
    18ae:	01 48 78    	mov.b     w1, [w0]
    18b0:	03 00 37    	bra       0x18b8 <.L89>

000018b2 <.L88>:
                            } else {
                                USB_error_flags |= REQUEST_ERROR;
    18b2:	0c c8 bf    	mov.b     0x80c, WREG
    18b4:	00 04 a0    	bset.b    w0, #0x0
    18b6:	0c e8 b7    	mov.b     WREG, 0x80c

000018b8 <.L89>:
                            }
                            break;
    18b8:	91 00 37    	bra       0x19dc <.L90>

000018ba <.L87>:
                        case CONFIG_STATE:
                            U1EP = (uint16_t *)&U1EP0;
    18ba:	a0 4a 20    	mov.w     #0x4aa, w0
    18bc:	00 0f 78    	mov.w     w0, [w14]
                            if (ep = USB_setup.wIndex.b[0] & 0x0F) {    // get EP and strip off direction bit for offset from U1EP0, if not EP0...
    18be:	40 80 20    	mov.w     #0x804, w0
    18c0:	40 40 90    	mov.b     [w0+4], w0
    18c2:	6f 40 60    	and.b     w0, #0xf, w0
    18c4:	20 47 98    	mov.b     w0, [w14+2]
    18c6:	2e 40 90    	mov.b     [w14+2], w0
    18c8:	00 04 e0    	cp0.b     w0
    18ca:	79 00 32    	bra       Z, 0x19be <.L91>
                                buf_desc_ptr = &BD[(ep << 1) | ((USB_setup.wIndex.b[0] & 0x80) ? 0x01 : 0x00)]; // compute pointer to the buffer descriptor for the specified EP
    18cc:	2e 40 90    	mov.b     [w14+2], w0
    18ce:	00 80 fb    	ze        w0, w0
    18d0:	00 00 40    	add.w     w0, w0, w0
    18d2:	80 00 78    	mov.w     w0, w1
    18d4:	40 80 20    	mov.w     #0x804, w0
    18d6:	40 40 90    	mov.b     [w0+4], w0
    18d8:	00 00 fb    	se        w0, w0
    18da:	4f 00 de    	lsr.w     w0, #0xf, w0
    18dc:	01 00 70    	ior.w     w0, w1, w0
    18de:	c2 00 dd    	sl.w      w0, #0x2, w1
    18e0:	00 a0 20    	mov.w     #0xa00, w0
    18e2:	00 80 40    	add.w     w1, w0, w0
    18e4:	20 07 98    	mov.w     w0, [w14+4]
                                if (USB_setup.wIndex.b[0] & 0x80) { // if the specified EP direction is IN...
    18e6:	40 80 20    	mov.w     #0x804, w0
    18e8:	40 40 90    	mov.b     [w0+4], w0
    18ea:	00 04 e0    	cp0.b     w0
    18ec:	30 00 3d    	bra       GE, 0x194e <.L92>
                                    if (U1EP[ep] & 0x04) {          // if EPn is enabled for IN transfers...
    18ee:	2e 40 90    	mov.b     [w14+2], w0
    18f0:	00 80 fb    	ze        w0, w0
    18f2:	00 00 40    	add.w     w0, w0, w0
    18f4:	1e 00 40    	add.w     w0, [w14], w0
    18f6:	10 00 78    	mov.w     [w0], w0
    18f8:	64 00 60    	and.w     w0, #0x4, w0
    18fa:	00 00 e0    	cp0.w     w0
    18fc:	24 00 32    	bra       Z, 0x1946 <.L93>
                                        if (USB_setup.bRequest == CLEAR_FEATURE) {
    18fe:	40 80 20    	mov.w     #0x804, w0
    1900:	10 40 90    	mov.b     [w0+1], w0
    1902:	e1 4f 50    	sub.b     w0, #0x1, [w15]
    1904:	19 00 3a    	bra       NZ, 0x1938 <.L94>
                                            U1EP[ep] &= 0xFD;       // clear EPSTALL bit of U1EPn register
    1906:	2e 40 90    	mov.b     [w14+2], w0
    1908:	00 80 fb    	ze        w0, w0
    190a:	00 00 40    	add.w     w0, w0, w0
    190c:	9e 00 40    	add.w     w0, [w14], w1
    190e:	2e 40 90    	mov.b     [w14+2], w0
    1910:	00 80 fb    	ze        w0, w0
    1912:	00 00 40    	add.w     w0, w0, w0
    1914:	1e 00 40    	add.w     w0, [w14], w0
    1916:	10 01 78    	mov.w     [w0], w2
    1918:	d0 0f 20    	mov.w     #0xfd, w0
    191a:	00 00 61    	and.w     w2, w0, w0
    191c:	80 08 78    	mov.w     w0, [w1]
                                            buf_desc_ptr->status &= ~BSTALL;
    191e:	2e 00 90    	mov.w     [w14+4], w0
    1920:	90 40 90    	mov.b     [w0+1], w1
    1922:	b0 cf b3    	mov.b     #0xfb, w0
    1924:	80 c0 60    	and.b     w1, w0, w1
    1926:	2e 00 90    	mov.w     [w14+4], w0
    1928:	11 40 98    	mov.b     w1, [w0+1]
                                            buf_desc_ptr->status |= DTS;
    192a:	2e 00 90    	mov.w     [w14+4], w0
    192c:	10 40 90    	mov.b     [w0+1], w0
    192e:	80 40 78    	mov.b     w0, w1
    1930:	01 64 a0    	bset.b    w1, #0x6
    1932:	2e 00 90    	mov.w     [w14+4], w0
    1934:	11 40 98    	mov.b     w1, [w0+1]
    1936:	43 00 37    	bra       0x19be <.L91>

00001938 <.L94>:
                                        } else {
                                            buf_desc_ptr->status |= BSTALL;
    1938:	2e 00 90    	mov.w     [w14+4], w0
    193a:	10 40 90    	mov.b     [w0+1], w0
    193c:	80 40 78    	mov.b     w0, w1
    193e:	01 24 a0    	bset.b    w1, #0x2
    1940:	2e 00 90    	mov.w     [w14+4], w0
    1942:	11 40 98    	mov.b     w1, [w0+1]
    1944:	3c 00 37    	bra       0x19be <.L91>

00001946 <.L93>:
                                        }
                                    } else {
                                        USB_error_flags |= REQUEST_ERROR;
    1946:	0c c8 bf    	mov.b     0x80c, WREG
    1948:	00 04 a0    	bset.b    w0, #0x0
    194a:	0c e8 b7    	mov.b     WREG, 0x80c
    194c:	38 00 37    	bra       0x19be <.L91>

0000194e <.L92>:
                                    }
                                } else {                    // ...otherwise the specified EP direction is OUT, so...
                                    if (U1EP[ep] & 0x08) {  // if the EP is enabled for OUT transfers...
    194e:	2e 40 90    	mov.b     [w14+2], w0
    1950:	00 80 fb    	ze        w0, w0
    1952:	00 00 40    	add.w     w0, w0, w0
    1954:	1e 00 40    	add.w     w0, [w14], w0
    1956:	10 00 78    	mov.w     [w0], w0
    1958:	68 00 60    	and.w     w0, #0x8, w0
    195a:	00 00 e0    	cp0.w     w0
    195c:	2d 00 32    	bra       Z, 0x19b8 <.L95>
                                        if (USB_setup.bRequest == CLEAR_FEATURE) {
    195e:	40 80 20    	mov.w     #0x804, w0
    1960:	10 40 90    	mov.b     [w0+1], w0
    1962:	e1 4f 50    	sub.b     w0, #0x1, [w15]
    1964:	19 00 3a    	bra       NZ, 0x1998 <.L96>
                                            U1EP[ep] &= 0xFD;       // clear EPSTALL bit of U1EPn register
    1966:	2e 40 90    	mov.b     [w14+2], w0
    1968:	00 80 fb    	ze        w0, w0
    196a:	00 00 40    	add.w     w0, w0, w0
    196c:	9e 00 40    	add.w     w0, [w14], w1
    196e:	2e 40 90    	mov.b     [w14+2], w0
    1970:	00 80 fb    	ze        w0, w0
    1972:	00 00 40    	add.w     w0, w0, w0
    1974:	1e 00 40    	add.w     w0, [w14], w0
    1976:	10 01 78    	mov.w     [w0], w2
    1978:	d0 0f 20    	mov.w     #0xfd, w0
    197a:	00 00 61    	and.w     w2, w0, w0
    197c:	80 08 78    	mov.w     w0, [w1]
                                            buf_desc_ptr->status &= ~BSTALL;
    197e:	2e 00 90    	mov.w     [w14+4], w0
    1980:	90 40 90    	mov.b     [w0+1], w1
    1982:	b0 cf b3    	mov.b     #0xfb, w0
    1984:	80 c0 60    	and.b     w1, w0, w1
    1986:	2e 00 90    	mov.w     [w14+4], w0
    1988:	11 40 98    	mov.b     w1, [w0+1]
                                            buf_desc_ptr->status &= ~DTS;
    198a:	2e 00 90    	mov.w     [w14+4], w0
    198c:	90 40 90    	mov.b     [w0+1], w1
    198e:	f0 cb b3    	mov.b     #0xbf, w0
    1990:	80 c0 60    	and.b     w1, w0, w1
    1992:	2e 00 90    	mov.w     [w14+4], w0
    1994:	11 40 98    	mov.b     w1, [w0+1]
    1996:	06 00 37    	bra       0x19a4 <.L97>

00001998 <.L96>:
                                        } else {
                                            buf_desc_ptr->status |= BSTALL;
    1998:	2e 00 90    	mov.w     [w14+4], w0
    199a:	10 40 90    	mov.b     [w0+1], w0
    199c:	80 40 78    	mov.b     w0, w1
    199e:	01 24 a0    	bset.b    w1, #0x2
    19a0:	2e 00 90    	mov.w     [w14+4], w0
    19a2:	11 40 98    	mov.b     w1, [w0+1]

000019a4 <.L97>:
                                        }
                                        buf_desc_ptr->status = (USB_setup.bRequest == CLEAR_FEATURE) ? (UOWN | DTSEN) : (UOWN | BSTALL);
    19a4:	40 80 20    	mov.w     #0x804, w0
    19a6:	10 40 90    	mov.b     [w0+1], w0
    19a8:	e1 4f 50    	sub.b     w0, #0x1, [w15]
    19aa:	02 00 3a    	bra       NZ, 0x19b0 <.L98>
    19ac:	80 c8 b3    	mov.b     #0x88, w0
    19ae:	01 00 37    	bra       0x19b2 <.L99>

000019b0 <.L98>:
    19b0:	40 c8 b3    	mov.b     #0x84, w0

000019b2 <.L99>:
    19b2:	ae 00 90    	mov.w     [w14+4], w1
    19b4:	90 40 98    	mov.b     w0, [w1+1]
    19b6:	03 00 37    	bra       0x19be <.L91>

000019b8 <.L95>:
                                    } else {
                                        USB_error_flags |= REQUEST_ERROR;
    19b8:	0c c8 bf    	mov.b     0x80c, WREG
    19ba:	00 04 a0    	bset.b    w0, #0x0
    19bc:	0c e8 b7    	mov.b     WREG, 0x80c

000019be <.L91>:
                                    }
                                }
                            }
                            if (!(USB_error_flags & REQUEST_ERROR)) {   // if there was no Request Error...
    19be:	0c c8 bf    	mov.b     0x80c, WREG
    19c0:	00 80 fb    	ze        w0, w0
    19c2:	61 00 60    	and.w     w0, #0x1, w0
    19c4:	00 00 e0    	cp0.w     w0
    19c6:	06 00 3a    	bra       NZ, 0x19d4 <.L100>
                                BD[EP0IN].bytecount = 0;
    19c8:	40 a0 20    	mov.w     #0xa04, w0
    19ca:	80 40 eb    	clr.b     w1
    19cc:	01 48 78    	mov.b     w1, [w0]
                                BD[EP0IN].status = UOWN | DTS | DTSEN;  // ...send packet as DATA1, set UOWN bit
    19ce:	50 a0 20    	mov.w     #0xa05, w0
    19d0:	81 cc b3    	mov.b     #0xc8, w1
    19d2:	01 48 78    	mov.b     w1, [w0]

000019d4 <.L100>:
                            }
                            break;
    19d4:	03 00 37    	bra       0x19dc <.L90>

000019d6 <.L137>:
                        default:
                            USB_error_flags |= REQUEST_ERROR;
    19d6:	0c c8 bf    	mov.b     0x80c, WREG
    19d8:	00 04 a0    	bset.b    w0, #0x0
    19da:	0c e8 b7    	mov.b     WREG, 0x80c

000019dc <.L90>:
                    }
                    break;
    19dc:	04 00 37    	bra       0x19e6 <.L84>

000019de <.L135>:
                default:
                    USB_error_flags |= REQUEST_ERROR;
    19de:	0c c8 bf    	mov.b     0x80c, WREG
    19e0:	00 04 a0    	bset.b    w0, #0x0
    19e2:	0c e8 b7    	mov.b     WREG, 0x80c
            }
            break;
    19e4:	fc 00 37    	bra       0x1bde <.L41>

000019e6 <.L84>:
    19e6:	fb 00 37    	bra       0x1bde <.L41>

000019e8 <.L45>:
        case SET_ADDRESS:
            if (USB_setup.wValue.b[0] > 0x7F) {     // if new device address is illegal, send Request Error
    19e8:	40 80 20    	mov.w     #0x804, w0
    19ea:	20 40 90    	mov.b     [w0+2], w0
    19ec:	00 04 e0    	cp0.b     w0
    19ee:	04 00 3d    	bra       GE, 0x19f8 <.L101>
                USB_error_flags |= REQUEST_ERROR;
    19f0:	0c c8 bf    	mov.b     0x80c, WREG
    19f2:	00 04 a0    	bset.b    w0, #0x0
    19f4:	0c e8 b7    	mov.b     WREG, 0x80c
            } else {
                USB_request.setup.bmRequestType = USB_setup.bmRequestType;  // processing a SET_ADDRESS request
                USB_request.setup.bRequest = USB_setup.bRequest;
                USB_request.setup.wValue.w = USB_setup.wValue.w;
                USB_request.setup.wIndex.w = USB_setup.wIndex.w;
                USB_request.setup.wLength.w = USB_setup.wLength.w;
                USB_in_callbacks[0] = usb_set_address_callback;
                BD[EP0IN].bytecount = 0;
                BD[EP0IN].status = UOWN | DTS | DTSEN;  // send packet as DATA1, set UOWN bit
            }
            break;
    19f6:	f3 00 37    	bra       0x1bde <.L41>

000019f8 <.L101>:
    19f8:	40 80 20    	mov.w     #0x804, w0
    19fa:	90 40 78    	mov.b     [w0], w1
    19fc:	20 93 20    	mov.w     #0x932, w0
    19fe:	01 48 78    	mov.b     w1, [w0]
    1a00:	40 80 20    	mov.w     #0x804, w0
    1a02:	90 40 90    	mov.b     [w0+1], w1
    1a04:	30 93 20    	mov.w     #0x933, w0
    1a06:	01 48 78    	mov.b     w1, [w0]
    1a08:	40 80 20    	mov.w     #0x804, w0
    1a0a:	10 00 90    	mov.w     [w0+2], w0
    1a0c:	a0 49 88    	mov.w     w0, 0x934
    1a0e:	40 80 20    	mov.w     #0x804, w0
    1a10:	20 00 90    	mov.w     [w0+4], w0
    1a12:	b0 49 88    	mov.w     w0, 0x936
    1a14:	40 80 20    	mov.w     #0x804, w0
    1a16:	30 00 90    	mov.w     [w0+6], w0
    1a18:	c0 49 88    	mov.w     w0, 0x938
    1a1a:	80 3a 21    	mov.w     #0x13a8, w0
    1a1c:	00 4a 88    	mov.w     w0, 0x940
    1a1e:	40 a0 20    	mov.w     #0xa04, w0
    1a20:	80 40 eb    	clr.b     w1
    1a22:	01 48 78    	mov.b     w1, [w0]
    1a24:	50 a0 20    	mov.w     #0xa05, w0
    1a26:	81 cc b3    	mov.b     #0xc8, w1
    1a28:	01 48 78    	mov.b     w1, [w0]
    1a2a:	d9 00 37    	bra       0x1bde <.L41>

00001a2c <.L46>:
        case GET_DESCRIPTOR:
            USB_request.setup.bmRequestType = USB_setup.bmRequestType;  // processing a GET_DESCRIPTOR request
    1a2c:	40 80 20    	mov.w     #0x804, w0
    1a2e:	90 40 78    	mov.b     [w0], w1
    1a30:	20 93 20    	mov.w     #0x932, w0
    1a32:	01 48 78    	mov.b     w1, [w0]
            USB_request.setup.bRequest = USB_setup.bRequest;
    1a34:	40 80 20    	mov.w     #0x804, w0
    1a36:	90 40 90    	mov.b     [w0+1], w1
    1a38:	30 93 20    	mov.w     #0x933, w0
    1a3a:	01 48 78    	mov.b     w1, [w0]
            USB_request.setup.wValue.w = USB_setup.wValue.w;
    1a3c:	40 80 20    	mov.w     #0x804, w0
    1a3e:	10 00 90    	mov.w     [w0+2], w0
    1a40:	a0 49 88    	mov.w     w0, 0x934
            USB_request.setup.wIndex.w = USB_setup.wIndex.w;
    1a42:	40 80 20    	mov.w     #0x804, w0
    1a44:	20 00 90    	mov.w     [w0+4], w0
    1a46:	b0 49 88    	mov.w     w0, 0x936
            USB_request.setup.wLength.w = USB_setup.wLength.w;
    1a48:	40 80 20    	mov.w     #0x804, w0
    1a4a:	30 00 90    	mov.w     [w0+6], w0
    1a4c:	c0 49 88    	mov.w     w0, 0x938
            switch (USB_setup.wValue.b[1]) {
    1a4e:	40 80 20    	mov.w     #0x804, w0
    1a50:	30 40 90    	mov.b     [w0+3], w0
    1a52:	00 80 fb    	ze        w0, w0
    1a54:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    1a56:	0b 00 32    	bra       Z, 0x1a6e <.L105>
    1a58:	e3 0f 50    	sub.w     w0, #0x3, [w15]
    1a5a:	24 00 32    	bra       Z, 0x1aa4 <.L106>
    1a5c:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    1a5e:	37 00 3a    	bra       NZ, 0x1ace <.L138>
                case DEVICE:
                    USB_request.data_ptr = Device;
    1a60:	00 30 29    	mov.w     #0x9300, w0
    1a62:	d0 49 88    	mov.w     w0, 0x93a
                    USB_request.bytes_left.w = (uint16_t)USB_request.data_ptr[0];
    1a64:	d0 49 80    	mov.w     0x93a, w0
    1a66:	10 40 78    	mov.b     [w0], w0
    1a68:	00 80 fb    	ze        w0, w0
    1a6a:	e0 49 88    	mov.w     w0, 0x93c
                    break;
    1a6c:	39 00 37    	bra       0x1ae0 <.L107>

00001a6e <.L105>:
                case CONFIGURATION:
                    if (USB_setup.wValue.b[0] < NUM_CONFIGURATIONS) {
    1a6e:	40 80 20    	mov.w     #0x804, w0
    1a70:	20 40 90    	mov.b     [w0+2], w0
    1a72:	00 04 e0    	cp0.b     w0
    1a74:	13 00 3a    	bra       NZ, 0x1a9c <.L108>
                        USB_request.data_ptr = Configurations[USB_setup.wValue.b[0]];
    1a76:	40 80 20    	mov.w     #0x804, w0
    1a78:	20 40 90    	mov.b     [w0+2], w0
    1a7a:	00 80 fb    	ze        w0, w0
    1a7c:	80 00 40    	add.w     w0, w0, w1
    1a7e:	40 32 29    	mov.w     #0x9324, w0
    1a80:	00 80 40    	add.w     w1, w0, w0
    1a82:	10 00 78    	mov.w     [w0], w0
    1a84:	d0 49 88    	mov.w     w0, 0x93a
                        USB_request.bytes_left.b[0] = USB_request.data_ptr[2];  // wTotalLength starting at an offset of 2
    1a86:	d0 49 80    	mov.w     0x93a, w0
    1a88:	00 80 e8    	inc2.w    w0, w0
    1a8a:	90 40 78    	mov.b     [w0], w1
    1a8c:	c0 93 20    	mov.w     #0x93c, w0
    1a8e:	01 48 78    	mov.b     w1, [w0]
                        USB_request.bytes_left.b[1] = USB_request.data_ptr[3];
    1a90:	d0 49 80    	mov.w     0x93a, w0
    1a92:	63 00 40    	add.w     w0, #0x3, w0
    1a94:	90 40 78    	mov.b     [w0], w1
    1a96:	d0 93 20    	mov.w     #0x93d, w0
    1a98:	01 48 78    	mov.b     w1, [w0]
                    } else
                        USB_error_flags |= REQUEST_ERROR;
                    break;
    1a9a:	22 00 37    	bra       0x1ae0 <.L107>

00001a9c <.L108>:
    1a9c:	0c c8 bf    	mov.b     0x80c, WREG
    1a9e:	00 04 a0    	bset.b    w0, #0x0
    1aa0:	0c e8 b7    	mov.b     WREG, 0x80c
    1aa2:	1e 00 37    	bra       0x1ae0 <.L107>

00001aa4 <.L106>:
                case STRING:
                    if (USB_setup.wValue.b[0] < NUM_STRINGS) {
    1aa4:	40 80 20    	mov.w     #0x804, w0
    1aa6:	20 40 90    	mov.b     [w0+2], w0
    1aa8:	e3 4f 50    	sub.b     w0, #0x3, [w15]
    1aaa:	0d 00 3e    	bra       GTU, 0x1ac6 <.L110>
                        USB_request.data_ptr = Strings[USB_setup.wValue.b[0]];
    1aac:	40 80 20    	mov.w     #0x804, w0
    1aae:	20 40 90    	mov.b     [w0+2], w0
    1ab0:	00 80 fb    	ze        w0, w0
    1ab2:	80 00 40    	add.w     w0, w0, w1
    1ab4:	40 36 29    	mov.w     #0x9364, w0
    1ab6:	00 80 40    	add.w     w1, w0, w0
    1ab8:	10 00 78    	mov.w     [w0], w0
    1aba:	d0 49 88    	mov.w     w0, 0x93a
                        USB_request.bytes_left.w = (uint16_t)USB_request.data_ptr[0];
    1abc:	d0 49 80    	mov.w     0x93a, w0
    1abe:	10 40 78    	mov.b     [w0], w0
    1ac0:	00 80 fb    	ze        w0, w0
    1ac2:	e0 49 88    	mov.w     w0, 0x93c
                    } else
                        USB_error_flags |= REQUEST_ERROR;
                    break;
    1ac4:	0d 00 37    	bra       0x1ae0 <.L107>

00001ac6 <.L110>:
    1ac6:	0c c8 bf    	mov.b     0x80c, WREG
    1ac8:	00 04 a0    	bset.b    w0, #0x0
    1aca:	0c e8 b7    	mov.b     WREG, 0x80c
    1acc:	09 00 37    	bra       0x1ae0 <.L107>

00001ace <.L138>:
                default:
                    if (USB_get_descriptor_callback)
    1ace:	a0 40 80    	mov.w     0x814, w0
    1ad0:	00 00 e0    	cp0.w     w0
    1ad2:	03 00 32    	bra       Z, 0x1ada <.L112>
                        USB_get_descriptor_callback();
    1ad4:	a0 40 80    	mov.w     0x814, w0
    1ad6:	00 00 01    	call      w0
    1ad8:	03 00 37    	bra       0x1ae0 <.L107>

00001ada <.L112>:
                    else
                        USB_error_flags |= REQUEST_ERROR;
    1ada:	0c c8 bf    	mov.b     0x80c, WREG
    1adc:	00 04 a0    	bset.b    w0, #0x0
    1ade:	0c e8 b7    	mov.b     WREG, 0x80c

00001ae0 <.L107>:
            }
            if (!(USB_error_flags & REQUEST_ERROR)) {
    1ae0:	0c c8 bf    	mov.b     0x80c, WREG
    1ae2:	00 80 fb    	ze        w0, w0
    1ae4:	61 00 60    	and.w     w0, #0x1, w0
    1ae6:	00 00 e0    	cp0.w     w0
    1ae8:	79 00 3a    	bra       NZ, 0x1bdc <.L143>
                USB_in_callbacks[0] = usb_send_data_packet;
    1aea:	20 be 21    	mov.w     #0x1be2, w0
    1aec:	00 4a 88    	mov.w     w0, 0x940
                if (USB_setup.wLength.w < USB_request.bytes_left.w)
    1aee:	40 80 20    	mov.w     #0x804, w0
    1af0:	b0 00 90    	mov.w     [w0+6], w1
    1af2:	e0 49 80    	mov.w     0x93c, w0
    1af4:	80 8f 50    	sub.w     w1, w0, [w15]
    1af6:	03 00 31    	bra       C, 0x1afe <.L114>
                    USB_request.bytes_left.w = USB_setup.wLength.w;
    1af8:	40 80 20    	mov.w     #0x804, w0
    1afa:	30 00 90    	mov.w     [w0+6], w0
    1afc:	e0 49 88    	mov.w     w0, 0x93c

00001afe <.L114>:
                usb_send_data_packet();
    1afe:	71 00 07    	rcall     0x1be2 <_usb_send_data_packet> <.LFB6> <.LFE5>
            }
            break;
    1b00:	6e 00 37    	bra       0x1bde <.L41>

00001b02 <.L47>:
        case GET_CONFIGURATION:
            BD[EP0IN].address[0] = USB_curr_config; // copy current device configuration to EP0 IN buffer
    1b02:	30 50 80    	mov.w     0xa06, w0
    1b04:	d1 80 20    	mov.w     #0x80d, w1
    1b06:	91 40 78    	mov.b     [w1], w1
    1b08:	01 48 78    	mov.b     w1, [w0]
            BD[EP0IN].bytecount = 1;
    1b0a:	40 a0 20    	mov.w     #0xa04, w0
    1b0c:	11 c0 b3    	mov.b     #0x1, w1
    1b0e:	01 48 78    	mov.b     w1, [w0]
            BD[EP0IN].status = UOWN | DTS | DTSEN;  // send packet as DATA1, set UOWN bit
    1b10:	50 a0 20    	mov.w     #0xa05, w0
    1b12:	81 cc b3    	mov.b     #0xc8, w1
    1b14:	01 48 78    	mov.b     w1, [w0]
            break;
    1b16:	63 00 37    	bra       0x1bde <.L41>

00001b18 <.L48>:
        case SET_CONFIGURATION:
            if (USB_setup.wValue.b[0] <= NUM_CONFIGURATIONS) {
    1b18:	40 80 20    	mov.w     #0x804, w0
    1b1a:	20 40 90    	mov.b     [w0+2], w0
    1b1c:	e1 4f 50    	sub.b     w0, #0x1, [w15]
    1b1e:	1a 00 3e    	bra       GTU, 0x1b54 <.L115>
                usb_disable_endpoints(1);           // disable all endpoints except EP0
    1b20:	10 c0 b3    	mov.b     #0x1, w0
    1b22:	23 fc 07    	rcall     0x136a <_usb_disable_endpoints> <.L0> <.LFB0> <.Ltext0>
                switch (USB_curr_config = USB_setup.wValue.b[0]) {
    1b24:	40 80 20    	mov.w     #0x804, w0
    1b26:	20 40 90    	mov.b     [w0+2], w0
    1b28:	0d e8 b7    	mov.b     WREG, 0x80d
    1b2a:	0d c8 bf    	mov.b     0x80d, WREG
    1b2c:	00 80 fb    	ze        w0, w0
    1b2e:	00 00 e0    	cp0.w     w0
    1b30:	03 00 3a    	bra       NZ, 0x1b38 <.L139>
                    case 0:
                        USB_USWSTAT = ADDRESS_STATE;
    1b32:	20 c0 b3    	mov.b     #0x2, w0
    1b34:	10 e8 b7    	mov.b     WREG, 0x810
                        break;
    1b36:	07 00 37    	bra       0x1b46 <.L118>

00001b38 <.L139>:
                    default:
                        USB_USWSTAT = CONFIG_STATE;
    1b38:	30 c0 b3    	mov.b     #0x3, w0
    1b3a:	10 e8 b7    	mov.b     WREG, 0x810
                        if (USB_set_config_callback)
    1b3c:	90 40 80    	mov.w     0x812, w0
    1b3e:	00 00 e0    	cp0.w     w0
    1b40:	02 00 32    	bra       Z, 0x1b46 <.L118>
                            USB_set_config_callback();
    1b42:	90 40 80    	mov.w     0x812, w0
    1b44:	00 00 01    	call      w0

00001b46 <.L118>:
                }
                BD[EP0IN].bytecount = 0;
    1b46:	40 a0 20    	mov.w     #0xa04, w0
    1b48:	80 40 eb    	clr.b     w1
    1b4a:	01 48 78    	mov.b     w1, [w0]
                BD[EP0IN].status = UOWN | DTS | DTSEN;  // send packet as DATA1, set UOWN bit
    1b4c:	50 a0 20    	mov.w     #0xa05, w0
    1b4e:	81 cc b3    	mov.b     #0xc8, w1
    1b50:	01 48 78    	mov.b     w1, [w0]
            } else {
                USB_error_flags |= REQUEST_ERROR;
            }
            break;
    1b52:	45 00 37    	bra       0x1bde <.L41>

00001b54 <.L115>:
    1b54:	0c c8 bf    	mov.b     0x80c, WREG
    1b56:	00 04 a0    	bset.b    w0, #0x0
    1b58:	0c e8 b7    	mov.b     WREG, 0x80c
    1b5a:	41 00 37    	bra       0x1bde <.L41>

00001b5c <.L49>:
        case GET_INTERFACE:
            switch (USB_USWSTAT) {
    1b5c:	10 c8 bf    	mov.b     0x810, WREG
    1b5e:	00 80 fb    	ze        w0, w0
    1b60:	e3 0f 50    	sub.w     w0, #0x3, [w15]
    1b62:	13 00 3a    	bra       NZ, 0x1b8a <.L140>
                case CONFIG_STATE:
                    if (USB_setup.wIndex.b[0] < NUM_INTERFACES) {
    1b64:	40 80 20    	mov.w     #0x804, w0
    1b66:	40 40 90    	mov.b     [w0+4], w0
    1b68:	00 04 e0    	cp0.b     w0
    1b6a:	0a 00 3a    	bra       NZ, 0x1b80 <.L122>
                        BD[EP0IN].address[0] = 0;   // always send back 0 for bAlternateSetting
    1b6c:	30 50 80    	mov.w     0xa06, w0
    1b6e:	80 40 eb    	clr.b     w1
    1b70:	01 48 78    	mov.b     w1, [w0]
                        BD[EP0IN].bytecount = 1;
    1b72:	40 a0 20    	mov.w     #0xa04, w0
    1b74:	11 c0 b3    	mov.b     #0x1, w1
    1b76:	01 48 78    	mov.b     w1, [w0]
                        BD[EP0IN].status = UOWN | DTS | DTSEN;  // send packet as DATA1, set UOWN bit
    1b78:	50 a0 20    	mov.w     #0xa05, w0
    1b7a:	81 cc b3    	mov.b     #0xc8, w1
    1b7c:	01 48 78    	mov.b     w1, [w0]
    1b7e:	03 00 37    	bra       0x1b86 <.L123>

00001b80 <.L122>:
                    } else {
                        USB_error_flags |= REQUEST_ERROR;
    1b80:	0c c8 bf    	mov.b     0x80c, WREG
    1b82:	00 04 a0    	bset.b    w0, #0x0
    1b84:	0c e8 b7    	mov.b     WREG, 0x80c

00001b86 <.L123>:
                    }
                    break;
    1b86:	00 00 00    	nop       
                default:
                    USB_error_flags |= REQUEST_ERROR;
            }
            break;
    1b88:	2a 00 37    	bra       0x1bde <.L41>

00001b8a <.L140>:
    1b8a:	0c c8 bf    	mov.b     0x80c, WREG
    1b8c:	00 04 a0    	bset.b    w0, #0x0
    1b8e:	0c e8 b7    	mov.b     WREG, 0x80c
    1b90:	26 00 37    	bra       0x1bde <.L41>

00001b92 <.L50>:
        case SET_INTERFACE:
            switch (USB_USWSTAT) {
    1b92:	10 c8 bf    	mov.b     0x810, WREG
    1b94:	00 80 fb    	ze        w0, w0
    1b96:	e3 0f 50    	sub.w     w0, #0x3, [w15]
    1b98:	19 00 3a    	bra       NZ, 0x1bcc <.L141>
                case CONFIG_STATE:
                    if (USB_setup.wIndex.b[0] < NUM_INTERFACES) {
    1b9a:	40 80 20    	mov.w     #0x804, w0
    1b9c:	40 40 90    	mov.b     [w0+4], w0
    1b9e:	00 04 e0    	cp0.b     w0
    1ba0:	10 00 3a    	bra       NZ, 0x1bc2 <.L127>
                        switch (USB_setup.wValue.b[0]) {
    1ba2:	40 80 20    	mov.w     #0x804, w0
    1ba4:	20 40 90    	mov.b     [w0+2], w0
    1ba6:	00 80 fb    	ze        w0, w0
    1ba8:	00 00 e0    	cp0.w     w0
    1baa:	07 00 3a    	bra       NZ, 0x1bba <.L142>
                            case 0:                 // currently support only bAlternateSetting of 0
                                BD[EP0IN].bytecount = 0;
    1bac:	40 a0 20    	mov.w     #0xa04, w0
    1bae:	80 40 eb    	clr.b     w1
    1bb0:	01 48 78    	mov.b     w1, [w0]
                                BD[EP0IN].status = UOWN | DTS | DTSEN;  // send packet as DATA1, set UOWN bit
    1bb2:	50 a0 20    	mov.w     #0xa05, w0
    1bb4:	81 cc b3    	mov.b     #0xc8, w1
    1bb6:	01 48 78    	mov.b     w1, [w0]
                                break;
    1bb8:	07 00 37    	bra       0x1bc8 <.L131>

00001bba <.L142>:
                            default:
                                USB_error_flags |= REQUEST_ERROR;
    1bba:	0c c8 bf    	mov.b     0x80c, WREG
    1bbc:	00 04 a0    	bset.b    w0, #0x0
    1bbe:	0c e8 b7    	mov.b     WREG, 0x80c
    1bc0:	03 00 37    	bra       0x1bc8 <.L131>

00001bc2 <.L127>:
                        }
                    } else {
                        USB_error_flags |= REQUEST_ERROR;
    1bc2:	0c c8 bf    	mov.b     0x80c, WREG
    1bc4:	00 04 a0    	bset.b    w0, #0x0
    1bc6:	0c e8 b7    	mov.b     WREG, 0x80c

00001bc8 <.L131>:
                    }
                    break;
    1bc8:	00 00 00    	nop       
                default:
                    USB_error_flags |= REQUEST_ERROR;
            }
            break;
    1bca:	09 00 37    	bra       0x1bde <.L41>

00001bcc <.L141>:
    1bcc:	0c c8 bf    	mov.b     0x80c, WREG
    1bce:	00 04 a0    	bset.b    w0, #0x0
    1bd0:	0c e8 b7    	mov.b     WREG, 0x80c
    1bd2:	05 00 37    	bra       0x1bde <.L41>

00001bd4 <.L42>:
        case SET_DESCRIPTOR:
        case SYNCH_FRAME:
        default:
            USB_error_flags |= REQUEST_ERROR;
    1bd4:	0c c8 bf    	mov.b     0x80c, WREG
    1bd6:	00 04 a0    	bset.b    w0, #0x0
    1bd8:	0c e8 b7    	mov.b     WREG, 0x80c
    1bda:	01 00 37    	bra       0x1bde <.L41>

00001bdc <.L143>:
    1bdc:	00 00 00    	nop       

00001bde <.L41>:
    }
}
    1bde:	00 80 fa    	ulnk      
    1be0:	00 00 06    	return    

00001be2 <_usb_send_data_packet>:

void usb_send_data_packet(void) {
    1be2:	02 00 fa    	lnk       #0x2
    uint8_t packet_length, i;

    if (USB_request.bytes_left.w < MAX_PACKET_SIZE) {
    1be4:	e1 49 80    	mov.w     0x93c, w1
    1be6:	f0 03 20    	mov.w     #0x3f, w0
    1be8:	80 8f 50    	sub.w     w1, w0, [w15]
    1bea:	05 00 3e    	bra       GTU, 0x1bf6 <.L145>
        packet_length = (uint8_t)USB_request.bytes_left.w;
    1bec:	e0 49 80    	mov.w     0x93c, w0
    1bee:	00 4f 78    	mov.b     w0, [w14]
        USB_request.bytes_left.w = 0;
    1bf0:	00 00 eb    	clr.w     w0
    1bf2:	e0 49 88    	mov.w     w0, 0x93c
    1bf4:	05 00 37    	bra       0x1c00 <.L146>

00001bf6 <.L145>:
    } else {
        packet_length = MAX_PACKET_SIZE;
    1bf6:	00 c4 b3    	mov.b     #0x40, w0
    1bf8:	00 4f 78    	mov.b     w0, [w14]
        USB_request.bytes_left.w -= MAX_PACKET_SIZE;
    1bfa:	e0 49 80    	mov.w     0x93c, w0
    1bfc:	00 04 b1    	sub.w     #0x40, w0
    1bfe:	e0 49 88    	mov.w     w0, 0x93c

00001c00 <.L146>:
    }
    for (i = 0; i < packet_length; i++) {
    1c00:	00 40 eb    	clr.b     w0
    1c02:	10 47 98    	mov.b     w0, [w14+1]
    1c04:	0c 00 37    	bra       0x1c1e <.L147>

00001c06 <.L148>:
        BD[EP0IN].address[i] = *USB_request.data_ptr++;
    1c06:	31 50 80    	mov.w     0xa06, w1
    1c08:	1e 40 90    	mov.b     [w14+1], w0
    1c0a:	00 80 fb    	ze        w0, w0
    1c0c:	80 80 40    	add.w     w1, w0, w1
    1c0e:	d0 49 80    	mov.w     0x93a, w0
    1c10:	10 41 78    	mov.b     [w0], w2
    1c12:	82 48 78    	mov.b     w2, [w1]
    1c14:	00 00 e8    	inc.w     w0, w0
    1c16:	d0 49 88    	mov.w     w0, 0x93a
    1c18:	1e 40 90    	mov.b     [w14+1], w0
    1c1a:	00 40 e8    	inc.b     w0, w0
    1c1c:	10 47 98    	mov.b     w0, [w14+1]

00001c1e <.L147>:
    1c1e:	1e 40 90    	mov.b     [w14+1], w0
    1c20:	9e 4f 50    	sub.b     w0, [w14], [w15]
    1c22:	f1 ff 39    	bra       NC, 0x1c06 <.L148>
    }
    BD[EP0IN].bytecount = packet_length;
    1c24:	40 a0 20    	mov.w     #0xa04, w0
    1c26:	1e 48 78    	mov.b     [w14], [w0]
    BD[EP0IN].status = ((BD[EP0IN].status ^ DTS) & DTS) | UOWN | DTSEN; // toggle the DATA01 bit, clear the PIDs bits, and set the UOWN and DTS bits
    1c28:	50 a0 20    	mov.w     #0xa05, w0
    1c2a:	10 40 78    	mov.b     [w0], w0
    1c2c:	00 c0 ea    	com.b     w0, w0
    1c2e:	02 c4 b3    	mov.b     #0x40, w2
    1c30:	82 40 60    	and.b     w0, w2, w1
    1c32:	80 c8 b3    	mov.b     #0x88, w0
    1c34:	00 c0 70    	ior.b     w1, w0, w0
    1c36:	80 40 78    	mov.b     w0, w1
    1c38:	50 a0 20    	mov.w     #0xa05, w0
    1c3a:	01 48 78    	mov.b     w1, [w0]
    if (USB_request.bytes_left.w == 0) {
    1c3c:	e0 49 80    	mov.w     0x93c, w0
    1c3e:	00 00 e0    	cp0.w     w0
    1c40:	0f 00 3a    	bra       NZ, 0x1c60 <.L144>
        if (USB_request.done_callback)
    1c42:	f0 49 80    	mov.w     0x93e, w0
    1c44:	00 00 e0    	cp0.w     w0
    1c46:	02 00 32    	bra       Z, 0x1c4c <.L150>
            USB_request.done_callback();
    1c48:	f0 49 80    	mov.w     0x93e, w0
    1c4a:	00 00 01    	call      w0

00001c4c <.L150>:
        USB_request.setup.bmRequestType = NO_REQUEST;    // sending a short packet, so clear device request
    1c4c:	20 93 20    	mov.w     #0x932, w0
    1c4e:	80 c0 eb    	setm.b    w1
    1c50:	01 48 78    	mov.b     w1, [w0]
        USB_request.setup.bRequest = NO_REQUEST;
    1c52:	30 93 20    	mov.w     #0x933, w0
    1c54:	80 c0 eb    	setm.b    w1
    1c56:	01 48 78    	mov.b     w1, [w0]
        USB_request.done_callback = (USB_CALLBACK_T)NULL;
    1c58:	00 00 eb    	clr.w     w0
    1c5a:	f0 49 88    	mov.w     w0, 0x93e
        USB_in_callbacks[0] = (USB_CALLBACK_T)NULL;
    1c5c:	00 00 eb    	clr.w     w0
    1c5e:	00 4a 88    	mov.w     w0, 0x940

00001c60 <.L144>:
    }
}
    1c60:	00 80 fa    	ulnk      
    1c62:	00 00 06    	return    

00001c64 <_usb_receive_data_packet>:

void usb_receive_data_packet(void) {
    1c64:	02 00 fa    	lnk       #0x2
    uint8_t i;

    for (i = 0; i < BD[EP0OUT].bytecount; i++) {
    1c66:	00 40 eb    	clr.b     w0
    1c68:	00 4f 78    	mov.b     w0, [w14]
    1c6a:	09 00 37    	bra       0x1c7e <.L152>

00001c6c <.L153>:
        *USB_request.data_ptr++ = BD[EP0OUT].address[i];
    1c6c:	d0 49 80    	mov.w     0x93a, w0
    1c6e:	12 50 80    	mov.w     0xa02, w2
    1c70:	9e 80 fb    	ze        [w14], w1
    1c72:	81 00 41    	add.w     w2, w1, w1
    1c74:	91 40 78    	mov.b     [w1], w1
    1c76:	01 48 78    	mov.b     w1, [w0]
    1c78:	00 00 e8    	inc.w     w0, w0
    1c7a:	d0 49 88    	mov.w     w0, 0x93a
    1c7c:	1e 4f e8    	inc.b     [w14], [w14]

00001c7e <.L152>:
    1c7e:	00 a0 20    	mov.w     #0xa00, w0
    1c80:	10 40 78    	mov.b     [w0], w0
    1c82:	9e 4f 50    	sub.b     w0, [w14], [w15]
    1c84:	f3 ff 3e    	bra       GTU, 0x1c6c <.L153>
    }
    USB_request.bytes_left.w -= BD[EP0OUT].bytecount;
    1c86:	e1 49 80    	mov.w     0x93c, w1
    1c88:	00 a0 20    	mov.w     #0xa00, w0
    1c8a:	10 40 78    	mov.b     [w0], w0
    1c8c:	00 80 fb    	ze        w0, w0
    1c8e:	00 80 50    	sub.w     w1, w0, w0
    1c90:	e0 49 88    	mov.w     w0, 0x93c
    if (USB_request.bytes_left.w > 0) {
    1c92:	e0 49 80    	mov.w     0x93c, w0
    1c94:	00 00 e0    	cp0.w     w0
    1c96:	0e 00 32    	bra       Z, 0x1cb4 <.L154>
        BD[EP0OUT].bytecount = MAX_PACKET_SIZE;
    1c98:	00 a0 20    	mov.w     #0xa00, w0
    1c9a:	01 c4 b3    	mov.b     #0x40, w1
    1c9c:	01 48 78    	mov.b     w1, [w0]
        BD[EP0OUT].status = ((BD[EP0OUT].status ^ DTS) & DTS) | UOWN | DTSEN;   // toggle the DATA01 bit, clear the PIDs bits, and set the UOWN and DTS bits
    1c9e:	10 a0 20    	mov.w     #0xa01, w0
    1ca0:	10 40 78    	mov.b     [w0], w0
    1ca2:	00 c0 ea    	com.b     w0, w0
    1ca4:	02 c4 b3    	mov.b     #0x40, w2
    1ca6:	82 40 60    	and.b     w0, w2, w1
    1ca8:	80 c8 b3    	mov.b     #0x88, w0
    1caa:	00 c0 70    	ior.b     w1, w0, w0
    1cac:	80 40 78    	mov.b     w0, w1
    1cae:	10 a0 20    	mov.w     #0xa01, w0
    1cb0:	01 48 78    	mov.b     w1, [w0]
    1cb2:	0f 00 37    	bra       0x1cd2 <.L151>

00001cb4 <.L154>:
    } else {
        if (USB_request.done_callback)
    1cb4:	f0 49 80    	mov.w     0x93e, w0
    1cb6:	00 00 e0    	cp0.w     w0
    1cb8:	02 00 32    	bra       Z, 0x1cbe <.L156>
            USB_request.done_callback();
    1cba:	f0 49 80    	mov.w     0x93e, w0
    1cbc:	00 00 01    	call      w0

00001cbe <.L156>:
        USB_request.setup.bmRequestType = NO_REQUEST;    // all data received, so clear device request
    1cbe:	20 93 20    	mov.w     #0x932, w0
    1cc0:	80 c0 eb    	setm.b    w1
    1cc2:	01 48 78    	mov.b     w1, [w0]
        USB_request.setup.bRequest = NO_REQUEST;
    1cc4:	30 93 20    	mov.w     #0x933, w0
    1cc6:	80 c0 eb    	setm.b    w1
    1cc8:	01 48 78    	mov.b     w1, [w0]
        USB_request.done_callback = (USB_CALLBACK_T)NULL;
    1cca:	00 00 eb    	clr.w     w0
    1ccc:	f0 49 88    	mov.w     w0, 0x93e
        USB_out_callbacks[0] = (USB_CALLBACK_T)NULL;
    1cce:	00 00 eb    	clr.w     w0
    1cd0:	00 4b 88    	mov.w     w0, 0x960

00001cd2 <.L151>:
    }
}
    1cd2:	00 80 fa    	ulnk      
    1cd4:	00 00 06    	return    

00001cd6 <_even_parity>:
    1cd6:	02 00 fa    	lnk       #0x2
    1cd8:	00 0f 78    	mov.w     w0, [w14]
    1cda:	1e 00 78    	mov.w     [w14], w0
    1cdc:	48 00 de    	lsr.w     w0, #0x8, w0
    1cde:	1e 0f 68    	xor.w     w0, [w14], [w14]
    1ce0:	1e 00 78    	mov.w     [w14], w0
    1ce2:	44 00 de    	lsr.w     w0, #0x4, w0
    1ce4:	1e 0f 68    	xor.w     w0, [w14], [w14]
    1ce6:	1e 00 78    	mov.w     [w14], w0
    1ce8:	42 00 de    	lsr.w     w0, #0x2, w0
    1cea:	1e 0f 68    	xor.w     w0, [w14], [w14]
    1cec:	1e 00 78    	mov.w     [w14], w0
    1cee:	00 00 d1    	lsr.w     w0, w0
    1cf0:	1e 0f 68    	xor.w     w0, [w14], [w14]
    1cf2:	9e 00 78    	mov.w     [w14], w1
    1cf4:	61 80 60    	and.w     w1, #0x1, w0
    1cf6:	00 80 fa    	ulnk      
    1cf8:	00 00 06    	return    

00001cfa <_enc_readReg>:
    1cfa:	08 00 fa    	lnk       #0x8
    1cfc:	88 9f be    	mov.d     w8, [w15++]
    1cfe:	00 04 78    	mov.w     w0, w8
    1d00:	31 07 98    	mov.w     w1, [w14+6]
    1d02:	3e 00 90    	mov.w     [w14+6], w0
    1d04:	00 e0 a0    	bset.w    w0, #0xe
    1d06:	10 07 98    	mov.w     w0, [w14+2]
    1d08:	9e 04 90    	mov.w     [w14+2], w9
    1d0a:	1e 00 90    	mov.w     [w14+2], w0
    1d0c:	e4 ff 07    	rcall     0x1cd6 <_even_parity> <.L0> <.LFB0> <.LFE7> <.Letext0> <.Ltext0>
    1d0e:	4f 00 dd    	sl.w      w0, #0xf, w0
    1d10:	09 00 70    	ior.w     w0, w9, w0
    1d12:	10 07 98    	mov.w     w0, [w14+2]
    1d14:	ea a2 a9    	bclr.b    0x2ea, #0x5
    1d16:	3e 40 90    	mov.b     [w14+3], w0
    1d18:	00 80 fb    	ze        w0, w0
    1d1a:	40 13 88    	mov.w     w0, 0x268
    1d1c:	00 00 00    	nop       

00001d1e <.L3>:
    1d1e:	00 13 80    	mov.w     0x260, w0
    1d20:	61 00 60    	and.w     w0, #0x1, w0
    1d22:	00 00 e0    	cp0.w     w0
    1d24:	fc ff 32    	bra       Z, 0x1d1e <.L3>
    1d26:	41 13 80    	mov.w     0x268, w1
    1d28:	01 0f 78    	mov.w     w1, [w14]
    1d2a:	2e 40 90    	mov.b     [w14+2], w0
    1d2c:	00 80 fb    	ze        w0, w0
    1d2e:	40 13 88    	mov.w     w0, 0x268
    1d30:	00 00 00    	nop       

00001d32 <.L4>:
    1d32:	00 13 80    	mov.w     0x260, w0
    1d34:	61 00 60    	and.w     w0, #0x1, w0
    1d36:	00 00 e0    	cp0.w     w0
    1d38:	fc ff 32    	bra       Z, 0x1d32 <.L4>
    1d3a:	41 13 80    	mov.w     0x268, w1
    1d3c:	01 0f 78    	mov.w     w1, [w14]
    1d3e:	ea a2 a8    	bset.b    0x2ea, #0x5
	...
    1d4c:	ea a2 a9    	bclr.b    0x2ea, #0x5
    1d4e:	68 22 ef    	clr.w     0x268
    1d50:	00 00 00    	nop       

00001d52 <.L5>:
    1d52:	00 13 80    	mov.w     0x260, w0
    1d54:	61 00 60    	and.w     w0, #0x1, w0
    1d56:	00 00 e0    	cp0.w     w0
    1d58:	fc ff 32    	bra       Z, 0x1d52 <.L5>
    1d5a:	40 13 80    	mov.w     0x268, w0
    1d5c:	00 40 78    	mov.b     w0, w0
    1d5e:	50 47 98    	mov.b     w0, [w14+5]
    1d60:	68 22 ef    	clr.w     0x268
    1d62:	00 00 00    	nop       

00001d64 <.L6>:
    1d64:	00 13 80    	mov.w     0x260, w0
    1d66:	61 00 60    	and.w     w0, #0x1, w0
    1d68:	00 00 e0    	cp0.w     w0
    1d6a:	fc ff 32    	bra       Z, 0x1d64 <.L6>
    1d6c:	40 13 80    	mov.w     0x268, w0
    1d6e:	00 40 78    	mov.b     w0, w0
    1d70:	40 47 98    	mov.b     w0, [w14+4]
    1d72:	ea a2 a8    	bset.b    0x2ea, #0x5
    1d74:	ae 00 90    	mov.w     [w14+4], w1
    1d76:	01 0c 78    	mov.w     w1, [w8]
    1d78:	08 00 78    	mov.w     w8, w0
    1d7a:	4f 04 be    	mov.d     [--w15], w8
    1d7c:	00 80 fa    	ulnk      
    1d7e:	00 00 06    	return    

00001d80 <_vendor_requests>:
    1d80:	0a 00 fa    	lnk       #0xa
    1d82:	40 80 20    	mov.w     #0x804, w0
    1d84:	10 40 90    	mov.b     [w0+1], w0
    1d86:	00 80 fb    	ze        w0, w0
    1d88:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    1d8a:	52 00 32    	bra       Z, 0x1e30 <.L11>
    1d8c:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    1d8e:	05 00 3c    	bra       GT, 0x1d9a <.L15>
    1d90:	00 00 e0    	cp0.w     w0
    1d92:	3d 00 32    	bra       Z, 0x1e0e <.L9>
    1d94:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    1d96:	43 00 32    	bra       Z, 0x1e1e <.L10>
    1d98:	66 00 37    	bra       0x1e66 <.L8>

00001d9a <.L15>:
    1d9a:	e4 0f 50    	sub.w     w0, #0x4, [w15]
    1d9c:	5b 00 32    	bra       Z, 0x1e54 <.L13>
    1d9e:	e4 0f 50    	sub.w     w0, #0x4, [w15]
    1da0:	50 00 35    	bra       LT, 0x1e42 <.L12>
    1da2:	e6 0f 50    	sub.w     w0, #0x6, [w15]
    1da4:	60 00 3a    	bra       NZ, 0x1e66 <.L8>
    1da6:	d0 40 80    	mov.w     0x81a, w0
    1da8:	00 0f 78    	mov.w     w0, [w14]
    1daa:	30 08 80    	mov.w     0x106, w0
    1dac:	10 07 98    	mov.w     w0, [w14+2]
    1dae:	50 08 80    	mov.w     0x10a, w0
    1db0:	20 07 98    	mov.w     w0, [w14+4]
    1db2:	00 41 80    	mov.w     0x820, w0
    1db4:	30 07 98    	mov.w     w0, [w14+6]
    1db6:	10 41 80    	mov.w     0x822, w0
    1db8:	40 07 98    	mov.w     w0, [w14+8]
    1dba:	30 50 80    	mov.w     0xa06, w0
    1dbc:	9e 40 78    	mov.b     [w14], w1
    1dbe:	01 48 78    	mov.b     w1, [w0]
    1dc0:	30 50 80    	mov.w     0xa06, w0
    1dc2:	00 00 e8    	inc.w     w0, w0
    1dc4:	9e 40 90    	mov.b     [w14+1], w1
    1dc6:	01 48 78    	mov.b     w1, [w0]
    1dc8:	30 50 80    	mov.w     0xa06, w0
    1dca:	00 80 e8    	inc2.w    w0, w0
    1dcc:	ae 40 90    	mov.b     [w14+2], w1
    1dce:	01 48 78    	mov.b     w1, [w0]
    1dd0:	30 50 80    	mov.w     0xa06, w0
    1dd2:	63 00 40    	add.w     w0, #0x3, w0
    1dd4:	be 40 90    	mov.b     [w14+3], w1
    1dd6:	01 48 78    	mov.b     w1, [w0]
    1dd8:	30 50 80    	mov.w     0xa06, w0
    1dda:	64 00 40    	add.w     w0, #0x4, w0
    1ddc:	ce 40 90    	mov.b     [w14+4], w1
    1dde:	01 48 78    	mov.b     w1, [w0]
    1de0:	30 50 80    	mov.w     0xa06, w0
    1de2:	65 00 40    	add.w     w0, #0x5, w0
    1de4:	de 40 90    	mov.b     [w14+5], w1
    1de6:	01 48 78    	mov.b     w1, [w0]
    1de8:	30 50 80    	mov.w     0xa06, w0
    1dea:	66 00 40    	add.w     w0, #0x6, w0
    1dec:	ee 40 90    	mov.b     [w14+6], w1
    1dee:	01 48 78    	mov.b     w1, [w0]
    1df0:	30 50 80    	mov.w     0xa06, w0
    1df2:	67 00 40    	add.w     w0, #0x7, w0
    1df4:	8e 48 90    	mov.b     [w14+8], w1
    1df6:	01 48 78    	mov.b     w1, [w0]
    1df8:	30 50 80    	mov.w     0xa06, w0
    1dfa:	68 00 40    	add.w     w0, #0x8, w0
    1dfc:	9e 48 90    	mov.b     [w14+9], w1
    1dfe:	01 48 78    	mov.b     w1, [w0]
    1e00:	40 a0 20    	mov.w     #0xa04, w0
    1e02:	91 c0 b3    	mov.b     #0x9, w1
    1e04:	01 48 78    	mov.b     w1, [w0]
    1e06:	50 a0 20    	mov.w     #0xa05, w0
    1e08:	81 cc b3    	mov.b     #0xc8, w1
    1e0a:	01 48 78    	mov.b     w1, [w0]
    1e0c:	2f 00 37    	bra       0x1e6c <.L7>

00001e0e <.L9>:
    1e0e:	20 28 ef    	clr.w     0x820
    1e10:	40 a0 20    	mov.w     #0xa04, w0
    1e12:	80 40 eb    	clr.b     w1
    1e14:	01 48 78    	mov.b     w1, [w0]
    1e16:	50 a0 20    	mov.w     #0xa05, w0
    1e18:	81 cc b3    	mov.b     #0xc8, w1
    1e1a:	01 48 78    	mov.b     w1, [w0]
    1e1c:	27 00 37    	bra       0x1e6c <.L7>

00001e1e <.L10>:
    1e1e:	10 00 20    	mov.w     #0x1, w0
    1e20:	00 41 88    	mov.w     w0, 0x820
    1e22:	40 a0 20    	mov.w     #0xa04, w0
    1e24:	80 40 eb    	clr.b     w1
    1e26:	01 48 78    	mov.b     w1, [w0]
    1e28:	50 a0 20    	mov.w     #0xa05, w0
    1e2a:	81 cc b3    	mov.b     #0xc8, w1
    1e2c:	01 48 78    	mov.b     w1, [w0]
    1e2e:	1e 00 37    	bra       0x1e6c <.L7>

00001e30 <.L11>:
    1e30:	20 00 20    	mov.w     #0x2, w0
    1e32:	00 41 88    	mov.w     w0, 0x820
    1e34:	40 a0 20    	mov.w     #0xa04, w0
    1e36:	80 40 eb    	clr.b     w1
    1e38:	01 48 78    	mov.b     w1, [w0]
    1e3a:	50 a0 20    	mov.w     #0xa05, w0
    1e3c:	81 cc b3    	mov.b     #0xc8, w1
    1e3e:	01 48 78    	mov.b     w1, [w0]
    1e40:	15 00 37    	bra       0x1e6c <.L7>

00001e42 <.L12>:
    1e42:	30 00 20    	mov.w     #0x3, w0
    1e44:	00 41 88    	mov.w     w0, 0x820
    1e46:	40 a0 20    	mov.w     #0xa04, w0
    1e48:	80 40 eb    	clr.b     w1
    1e4a:	01 48 78    	mov.b     w1, [w0]
    1e4c:	50 a0 20    	mov.w     #0xa05, w0
    1e4e:	81 cc b3    	mov.b     #0xc8, w1
    1e50:	01 48 78    	mov.b     w1, [w0]
    1e52:	0c 00 37    	bra       0x1e6c <.L7>

00001e54 <.L13>:
    1e54:	40 00 20    	mov.w     #0x4, w0
    1e56:	00 41 88    	mov.w     w0, 0x820
    1e58:	40 a0 20    	mov.w     #0xa04, w0
    1e5a:	80 40 eb    	clr.b     w1
    1e5c:	01 48 78    	mov.b     w1, [w0]
    1e5e:	50 a0 20    	mov.w     #0xa05, w0
    1e60:	81 cc b3    	mov.b     #0xc8, w1
    1e62:	01 48 78    	mov.b     w1, [w0]
    1e64:	03 00 37    	bra       0x1e6c <.L7>

00001e66 <.L8>:
    1e66:	0c c8 bf    	mov.b     0x80c, WREG
    1e68:	00 04 a0    	bset.b    w0, #0x0
    1e6a:	0c e8 b7    	mov.b     WREG, 0x80c

00001e6c <.L7>:
    1e6c:	00 80 fa    	ulnk      
    1e6e:	00 00 06    	return    

00001e70 <_main>:
    1e70:	36 00 fa    	lnk       #0x36
    1e72:	26 02 07    	rcall     0x22c0 <_init_elecanisms> <.L0> <.LFB0> <.LFE3> <.Letext0> <.Ltext0>
    1e74:	00 03 20    	mov.w     #0x30, w0

    init_elecanisms();

    // //make a 32 bit timer
    T2CON = 0X30; //Stops any Timer2 operation
    1e76:	80 08 88    	mov.w     w0, 0x110
    T3CON = 0x30;
    1e78:	00 03 20    	mov.w     #0x30, w0
    1e7a:	90 08 88    	mov.w     w0, 0x112
    TMR3 = 0x00;
    1e7c:	0a 21 ef    	clr.w     0x10a
    TMR2 = 0x00;  //Clears contents of timer2 register
    1e7e:	06 21 ef    	clr.w     0x106
    PR2 = 0xFFFF; //Loads the Period register2 with 0xFFFF
    1e80:	00 80 eb    	setm.w    w0
    1e82:	60 08 88    	mov.w     w0, 0x10c
    PR3 = 0xFFFF;
    1e84:	00 80 eb    	setm.w    w0
    1e86:	70 08 88    	mov.w     w0, 0x10e
    IPC2bits.T3IP = 0x01;
    1e88:	41 05 80    	mov.w     0xa8, w1
    1e8a:	80 ff 2f    	mov.w     #0xfff8, w0
    1e8c:	00 80 60    	and.w     w1, w0, w0
    1e8e:	00 00 a0    	bset.w    w0, #0x0
    1e90:	40 05 88    	mov.w     w0, 0xa8
    IFS0bits.T3IF = 0;
    1e92:	85 00 a9    	bclr.b    0x85, #0x0
    T2CONbits.T32 = 1;
    1e94:	10 61 a8    	bset.b    0x110, #0x3
    T2CONbits.TON = 1; //Enable 32-bit timer operation
    1e96:	11 e1 a8    	bset.b    0x111, #0x7

    // Configure encoder pins and connect them to SPI2
    ENC_CSn_DIR = OUT; ENC_CSn = 1;
    1e98:	e8 a2 a9    	bclr.b    0x2e8, #0x5
    1e9a:	ea a2 a8    	bset.b    0x2ea, #0x5
    ENC_SCK_DIR = OUT; ENC_SCK = 0;
    1e9c:	e8 82 a9    	bclr.b    0x2e8, #0x4
    1e9e:	ea 82 a9    	bclr.b    0x2ea, #0x4
    ENC_MOSI_DIR = OUT; ENC_MOSI = 0;
    1ea0:	d8 a2 a9    	bclr.b    0x2d8, #0x5
    1ea2:	da a2 a9    	bclr.b    0x2da, #0x5
    ENC_MISO_DIR = IN;
    1ea4:	d8 82 a8    	bset.b    0x2d8, #0x4
    RPOR = (uint8_t *)&RPOR0;
    1ea6:	00 6c 20    	mov.w     #0x6c0, w0
    1ea8:	30 07 98    	mov.w     w0, [w14+6]
    RPINR = (uint8_t *)&RPINR0;
    1eaa:	00 68 20    	mov.w     #0x680, w0
    1eac:	40 07 98    	mov.w     w0, [w14+8]
    __builtin_write_OSCCONL(OSCCON & 0xBF);
    1eae:	11 3a 80    	mov.w     0x742, w1
    1eb0:	f0 0b 20    	mov.w     #0xbf, w0
    1eb2:	00 81 60    	and.w     w1, w0, w2
    1eb4:	60 04 20    	mov.w     #0x46, w0
    1eb6:	71 05 20    	mov.w     #0x57, w1
    1eb8:	23 74 20    	mov.w     #0x742, w3
    1eba:	80 49 78    	mov.b     w0, [w3]
    1ebc:	81 49 78    	mov.b     w1, [w3]
    1ebe:	82 49 78    	mov.b     w2, [w3]
    RPINR[MISO2_RP] = ENC_MISO_RP;
    1ec0:	4e 00 90    	mov.w     [w14+8], w0
    1ec2:	c0 02 b0    	add.w     #0x2c, w0
    1ec4:	91 c1 b3    	mov.b     #0x19, w1
    1ec6:	01 48 78    	mov.b     w1, [w0]
    RPOR[ENC_MOSI_RP] = MOSI2_RP;
    1ec8:	3e 00 90    	mov.w     [w14+6], w0
    1eca:	74 00 40    	add.w     w0, #0x14, w0
    1ecc:	a1 c0 b3    	mov.b     #0xa, w1
    1ece:	01 48 78    	mov.b     w1, [w0]
    RPOR[ENC_SCK_RP] = SCK2OUT_RP;
    1ed0:	3e 00 90    	mov.w     [w14+6], w0
    1ed2:	6a 00 40    	add.w     w0, #0xa, w0
    1ed4:	b1 c0 b3    	mov.b     #0xb, w1
    1ed6:	01 48 78    	mov.b     w1, [w0]
    __builtin_write_OSCCONL(OSCCON | 0x40);
    1ed8:	10 3a 80    	mov.w     0x742, w0
    1eda:	00 01 78    	mov.w     w0, w2
    1edc:	02 60 a0    	bset.w    w2, #0x6
    1ede:	60 04 20    	mov.w     #0x46, w0
    1ee0:	71 05 20    	mov.w     #0x57, w1
    1ee2:	23 74 20    	mov.w     #0x742, w3
    1ee4:	80 49 78    	mov.b     w0, [w3]
    1ee6:	81 49 78    	mov.b     w1, [w3]
    1ee8:	82 49 78    	mov.b     w2, [w3]
    SPI2CON1 = 0x003B;              // SPI2 mode = 1, SCK freq = 8 MHz
    1eea:	b0 03 20    	mov.w     #0x3b, w0
    1eec:	10 13 88    	mov.w     w0, 0x262
    SPI2CON2 = 0;
    1eee:	64 22 ef    	clr.w     0x264
    SPI2STAT = 0x8000;
    1ef0:	00 00 28    	mov.w     #0x8000, w0
    1ef2:	00 13 88    	mov.w     w0, 0x260
    

    // all of the motor stuff
    D8_DIR = OUT;      // configure D8 to be a digital output
    1ef4:	d9 22 a9    	bclr.b    0x2d9, #0x1
    D8 = 0;            // set D8 low
    1ef6:	db 22 a9    	bclr.b    0x2db, #0x1
    D7_DIR = OUT;      // configure D7 to be a digital output (IN2)
    1ef8:	d9 62 a9    	bclr.b    0x2d9, #0x3
    D7 = 0; 
    1efa:	db 62 a9    	bclr.b    0x2db, #0x3
    RPOR = (uint8_t *)&RPOR0;
    1efc:	00 6c 20    	mov.w     #0x6c0, w0
    1efe:	30 07 98    	mov.w     w0, [w14+6]
    RPINR = (uint8_t *)&RPINR0;
    1f00:	00 68 20    	mov.w     #0x680, w0
    1f02:	40 07 98    	mov.w     w0, [w14+8]
    __builtin_write_OSCCONL(OSCCON & 0xBF);
    1f04:	11 3a 80    	mov.w     0x742, w1
    1f06:	f0 0b 20    	mov.w     #0xbf, w0
    1f08:	00 81 60    	and.w     w1, w0, w2
    1f0a:	60 04 20    	mov.w     #0x46, w0
    1f0c:	71 05 20    	mov.w     #0x57, w1
    1f0e:	23 74 20    	mov.w     #0x742, w3
    1f10:	80 49 78    	mov.b     w0, [w3]
    1f12:	81 49 78    	mov.b     w1, [w3]
    1f14:	82 49 78    	mov.b     w2, [w3]
    RPOR[D8_RP] = OC2_RP;  // connect the OC1 module output to pin D8
    1f16:	3e 00 90    	mov.w     [w14+6], w0
    1f18:	64 00 40    	add.w     w0, #0x4, w0
    1f1a:	31 c1 b3    	mov.b     #0x13, w1
    1f1c:	01 48 78    	mov.b     w1, [w0]
    RPOR[D7_RP] = OC1_RP;
    1f1e:	3e 00 90    	mov.w     [w14+6], w0
    1f20:	6c 00 40    	add.w     w0, #0xc, w0
    1f22:	21 c1 b3    	mov.b     #0x12, w1
    1f24:	01 48 78    	mov.b     w1, [w0]
    __builtin_write_OSCCONL(OSCCON | 0x40);
    1f26:	10 3a 80    	mov.w     0x742, w0
    1f28:	00 01 78    	mov.w     w0, w2
    1f2a:	02 60 a0    	bset.w    w2, #0x6
    1f2c:	60 04 20    	mov.w     #0x46, w0
    1f2e:	71 05 20    	mov.w     #0x57, w1
    1f30:	23 74 20    	mov.w     #0x742, w3
    1f32:	80 49 78    	mov.b     w0, [w3]
    1f34:	81 49 78    	mov.b     w1, [w3]
    1f36:	82 49 78    	mov.b     w2, [w3]
    OC1CON1 = 0x1C06;   // configure OC1 module to use the peripheral clock (i.e., FCY, OCTSEL<2:0> = 0b111) and  to operate in edge-aligned PWM mode (OCM<2:0> = 0b110)
    1f38:	60 c0 21    	mov.w     #0x1c06, w0
    1f3a:	80 0c 88    	mov.w     w0, 0x190
    OC1CON2 = 0x001F;   // configure OC1 module to syncrhonize to itself (i.e., OCTRIG = 0 and SYNCSEL<4:0> = 0b11111)
    1f3c:	f0 01 20    	mov.w     #0x1f, w0
    1f3e:	90 0c 88    	mov.w     w0, 0x192
    OC2CON1 = 0x1C06;   // configure OC1 module to use the peripheral clock (i.e., FCY, OCTSEL<2:0> = 0b111) and to operate in edge-aligned PWM mode (OCM<2:0> = 0b110)
    1f40:	60 c0 21    	mov.w     #0x1c06, w0
    1f42:	d0 0c 88    	mov.w     w0, 0x19a
    OC2CON2 = 0x001F;   // configure OC1 module to syncrhonize to itself (i.e., OCTRIG = 0 and SYNCSEL<4:0> = 0b11111)
    1f44:	f0 01 20    	mov.w     #0x1f, w0
    1f46:	e0 0c 88    	mov.w     w0, 0x19c

    OC1RS = (uint16_t)(FCY / 1e4 - 1.);     // configure period register to get a frequency of 1kHz
    1f48:	f0 63 20    	mov.w     #0x63f, w0
    1f4a:	a0 0c 88    	mov.w     w0, 0x194
    OC2RS = (uint16_t)(FCY / 1e4 - 1.);     // configure period register to get a frequency of 1kHz
    1f4c:	f0 63 20    	mov.w     #0x63f, w0
    1f4e:	f0 0c 88    	mov.w     w0, 0x19e

    OCRvalue = 1*OC1RS/100;  // configure duty cycle to 1% (i.e., period / 10)r
    1f50:	a0 0c 80    	mov.w     0x194, w0
    1f52:	c2 00 de    	lsr.w     w0, #0x2, w1
    1f54:	b0 47 21    	mov.w     #0x147b, w0
    1f56:	00 08 b8    	mul.uu    w1, w0, w0
    1f58:	01 00 d1    	lsr.w     w1, w0
    1f5a:	50 07 98    	mov.w     w0, [w14+10]
    OCRvalueDamper = OC1RS/200; 
    1f5c:	a0 0c 80    	mov.w     0x194, w0
    1f5e:	c3 00 de    	lsr.w     w0, #0x3, w1
    1f60:	b0 47 21    	mov.w     #0x147b, w0
    1f62:	00 08 b8    	mul.uu    w1, w0, w0
    1f64:	01 00 d1    	lsr.w     w1, w0
    1f66:	60 07 98    	mov.w     w0, [w14+12]
    OC1R = 0;               //both are stopped
    1f68:	96 21 ef    	clr.w     0x196
    OC1TMR = 0;         // set OC1 timer count to 
    1f6a:	98 21 ef    	clr.w     0x198
         // configure duty cycle to 10% (i.e., period / 10)
    OC2R = 0;           //both are stopped
    1f6c:	a0 21 ef    	clr.w     0x1a0
    OC2TMR = 0;         // set OC1 timer count to 
    1f6e:	a2 21 ef    	clr.w     0x1a2


    //Wrapping code
    wrap = 0; 
    1f70:	1c 28 ef    	clr.w     0x81c

    //mode code
    mode = 4; //Regular mode
    1f72:	40 00 20    	mov.w     #0x4, w0
    1f74:	00 41 88    	mov.w     w0, 0x820
    distance = -100;
    1f76:	c0 f9 2f    	mov.w     #0xff9c, w0
    1f78:	00 0f 78    	mov.w     w0, [w14]
    address.w = 0x3FFF;
    1f7a:	f0 ff 23    	mov.w     #0x3fff, w0
    1f7c:	20 0f 98    	mov.w     w0, [w14+20]
    positionChange = 0; 
    1f7e:	26 28 ef    	clr.w     0x826
    previousEncValue = enc_readReg(address);
    1f80:	72 00 47    	add.w     w14, #0x12, w0
    1f82:	ae 08 90    	mov.w     [w14+20], w1
    1f84:	ba fe 07    	rcall     0x1cfa <_enc_readReg> <.LFB1> <.LFE0>
    previousEncValue.w = previousEncValue.w&0x3FFF; 
    1f86:	9e 08 90    	mov.w     [w14+18], w1
    1f88:	f0 ff 23    	mov.w     #0x3fff, w0
    1f8a:	00 80 60    	and.w     w1, w0, w0
    1f8c:	10 0f 98    	mov.w     w0, [w14+18]
    currentEncValue = 7000;
    1f8e:	80 b5 21    	mov.w     #0x1b58, w0
    1f90:	d0 40 88    	mov.w     w0, 0x81a
    wallPosition = 13000; 
    1f92:	80 2c 23    	mov.w     #0x32c8, w0
    1f94:	70 07 98    	mov.w     w0, [w14+14]
    randPositions[0] = -1; 
    1f96:	00 80 eb    	setm.w    w0
    1f98:	30 0f 98    	mov.w     w0, [w14+22]
    

    USB_setup_vendor_callback = vendor_requests;
    1f9a:	00 d8 21    	mov.w     #0x1d80, w0
    1f9c:	c0 40 88    	mov.w     w0, 0x818
    init_usb();
    1f9e:	15 fa 07    	rcall     0x13ca <_init_usb> <.LFB2> <.LFE1>

00001fa0 <.L55>:


    // while (USB_USWSTAT != CONFIG_STATE) {
    //     #ifndef USB_INTERRUPT
    //             usb_service();
    //     #endif
    // }

    while (1) {
        //Does the wrapping
        badCurrentEncValue = enc_readReg(address);
    1fa0:	40 03 20    	mov.w     #0x34, w0
    1fa2:	0e 00 40    	add.w     w0, w14, w0
    1fa4:	ae 08 90    	mov.w     [w14+20], w1
    1fa6:	a9 fe 07    	rcall     0x1cfa <_enc_readReg> <.LFB1> <.LFE0>
    1fa8:	ae 18 90    	mov.w     [w14+52], w1
    1faa:	21 41 88    	mov.w     w1, 0x824
        badCurrentEncValue.w = badCurrentEncValue.w & 0x3FFF;
    1fac:	21 41 80    	mov.w     0x824, w1
    1fae:	f0 ff 23    	mov.w     #0x3fff, w0
    1fb0:	00 80 60    	and.w     w1, w0, w0
    1fb2:	20 41 88    	mov.w     w0, 0x824
        if (((previousEncValue.w > badCurrentEncValue.w) && (previousEncValue.w - badCurrentEncValue.w > 15000))) { // we have wrapped around
    1fb4:	9e 08 90    	mov.w     [w14+18], w1
    1fb6:	20 41 80    	mov.w     0x824, w0
    1fb8:	80 8f 50    	sub.w     w1, w0, [w15]
    1fba:	16 00 36    	bra       LEU, 0x1fe8 <.L18>
    1fbc:	9e 08 90    	mov.w     [w14+18], w1
    1fbe:	20 41 80    	mov.w     0x824, w0
    1fc0:	80 80 50    	sub.w     w1, w0, w1
    1fc2:	80 a9 23    	mov.w     #0x3a98, w0
    1fc4:	80 8f 50    	sub.w     w1, w0, [w15]
    1fc6:	10 00 36    	bra       LEU, 0x1fe8 <.L18>
            if (wrap == 2) { // max valye - we have gone back to the beginning
    1fc8:	e0 40 80    	mov.w     0x81c, w0
    1fca:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    1fcc:	02 00 3a    	bra       NZ, 0x1fd2 <.L19>
                wrap = 0;
    1fce:	1c 28 ef    	clr.w     0x81c
    1fd0:	0b 00 37    	bra       0x1fe8 <.L18>

00001fd2 <.L19>:
            }
            else if (wrap == 1){
    1fd2:	e0 40 80    	mov.w     0x81c, w0
    1fd4:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    1fd6:	03 00 3a    	bra       NZ, 0x1fde <.L20>
                wrap = 2; //made another loop through
    1fd8:	20 00 20    	mov.w     #0x2, w0
    1fda:	e0 40 88    	mov.w     w0, 0x81c
    1fdc:	05 00 37    	bra       0x1fe8 <.L18>

00001fde <.L20>:
            }
            else if (wrap == 0){
    1fde:	e0 40 80    	mov.w     0x81c, w0
    1fe0:	00 00 e0    	cp0.w     w0
    1fe2:	02 00 3a    	bra       NZ, 0x1fe8 <.L18>
                wrap = 1; 
    1fe4:	10 00 20    	mov.w     #0x1, w0
    1fe6:	e0 40 88    	mov.w     w0, 0x81c

00001fe8 <.L18>:
            }
        }
        if (((previousEncValue.w < badCurrentEncValue.w) && (badCurrentEncValue.w - previousEncValue.w > 15000)) ){
    1fe8:	9e 08 90    	mov.w     [w14+18], w1
    1fea:	20 41 80    	mov.w     0x824, w0
    1fec:	80 8f 50    	sub.w     w1, w0, [w15]
    1fee:	16 00 31    	bra       C, 0x201c <.L21>
    1ff0:	21 41 80    	mov.w     0x824, w1
    1ff2:	1e 08 90    	mov.w     [w14+18], w0
    1ff4:	80 80 50    	sub.w     w1, w0, w1
    1ff6:	80 a9 23    	mov.w     #0x3a98, w0
    1ff8:	80 8f 50    	sub.w     w1, w0, [w15]
    1ffa:	10 00 36    	bra       LEU, 0x201c <.L21>
            if (wrap == 2) { // max valye - we have gone back to the beginning
    1ffc:	e0 40 80    	mov.w     0x81c, w0
    1ffe:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    2000:	03 00 3a    	bra       NZ, 0x2008 <.L22>
                wrap = 1;
    2002:	10 00 20    	mov.w     #0x1, w0
    2004:	e0 40 88    	mov.w     w0, 0x81c
    2006:	0a 00 37    	bra       0x201c <.L21>

00002008 <.L22>:
            }
            else if (wrap == 1){
    2008:	e0 40 80    	mov.w     0x81c, w0
    200a:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    200c:	02 00 3a    	bra       NZ, 0x2012 <.L23>
                wrap = 0; //made another loop through
    200e:	1c 28 ef    	clr.w     0x81c
    2010:	05 00 37    	bra       0x201c <.L21>

00002012 <.L23>:
            }
            else if (wrap == 0){
    2012:	e0 40 80    	mov.w     0x81c, w0
    2014:	00 00 e0    	cp0.w     w0
    2016:	02 00 3a    	bra       NZ, 0x201c <.L21>
                wrap = 2;
    2018:	20 00 20    	mov.w     #0x2, w0
    201a:	e0 40 88    	mov.w     w0, 0x81c

0000201c <.L21>:
            }
        }
        currentEncValue = (badCurrentEncValue.w & 0x3FFF) + wrap*16384;
    201c:	21 41 80    	mov.w     0x824, w1
    201e:	f0 ff 23    	mov.w     #0x3fff, w0
    2020:	80 80 60    	and.w     w1, w0, w1
    2022:	e0 40 80    	mov.w     0x81c, w0
    2024:	4e 00 dd    	sl.w      w0, #0xe, w0
    2026:	00 80 40    	add.w     w1, w0, w0
    2028:	d0 40 88    	mov.w     w0, 0x81a

        //Does the modes
        if (mode == 0){ //we are in spring mode
    202a:	00 41 80    	mov.w     0x820, w0
    202c:	00 00 e0    	cp0.w     w0
    202e:	4b 00 3a    	bra       NZ, 0x20c6 <.L24>
            if(abs(distance) < 6000){
    2030:	10 89 2e    	mov.w     #0xe891, w0
    2032:	9e 00 78    	mov.w     [w14], w1
    2034:	80 8f 50    	sub.w     w1, w0, [w15]
    2036:	0a 00 35    	bra       LT, 0x204c <.L25>
    2038:	f0 76 21    	mov.w     #0x176f, w0
    203a:	9e 00 78    	mov.w     [w14], w1
    203c:	80 8f 50    	sub.w     w1, w0, [w15]
    203e:	06 00 3c    	bra       GT, 0x204c <.L25>
                springForce = 37*OCRvalue;
    2040:	de 00 90    	mov.w     [w14+10], w1
    2042:	50 02 20    	mov.w     #0x25, w0
    2044:	00 88 b9    	mul.ss    w1, w0, w0
    2046:	00 00 78    	mov.w     w0, w0
    2048:	10 07 98    	mov.w     w0, [w14+2]
    204a:	21 00 37    	bra       0x208e <.L26>

0000204c <.L25>:
            }
            else if (abs(distance) < 12000){
    204c:	10 12 2d    	mov.w     #0xd121, w0
    204e:	9e 00 78    	mov.w     [w14], w1
    2050:	80 8f 50    	sub.w     w1, w0, [w15]
    2052:	0a 00 35    	bra       LT, 0x2068 <.L27>
    2054:	f0 ed 22    	mov.w     #0x2edf, w0
    2056:	9e 00 78    	mov.w     [w14], w1
    2058:	80 8f 50    	sub.w     w1, w0, [w15]
    205a:	06 00 3c    	bra       GT, 0x2068 <.L27>
                springForce = 38*OCRvalue;
    205c:	de 00 90    	mov.w     [w14+10], w1
    205e:	60 02 20    	mov.w     #0x26, w0
    2060:	00 88 b9    	mul.ss    w1, w0, w0
    2062:	00 00 78    	mov.w     w0, w0
    2064:	10 07 98    	mov.w     w0, [w14+2]
    2066:	13 00 37    	bra       0x208e <.L26>

00002068 <.L27>:
            }
            else if (abs(distance) < 18000){
    2068:	10 9b 2b    	mov.w     #0xb9b1, w0
    206a:	9e 00 78    	mov.w     [w14], w1
    206c:	80 8f 50    	sub.w     w1, w0, [w15]
    206e:	0a 00 35    	bra       LT, 0x2084 <.L28>
    2070:	f0 64 24    	mov.w     #0x464f, w0
    2072:	9e 00 78    	mov.w     [w14], w1
    2074:	80 8f 50    	sub.w     w1, w0, [w15]
    2076:	06 00 3c    	bra       GT, 0x2084 <.L28>
                springForce = 39*OCRvalue;
    2078:	de 00 90    	mov.w     [w14+10], w1
    207a:	70 02 20    	mov.w     #0x27, w0
    207c:	00 88 b9    	mul.ss    w1, w0, w0
    207e:	00 00 78    	mov.w     w0, w0
    2080:	10 07 98    	mov.w     w0, [w14+2]
    2082:	05 00 37    	bra       0x208e <.L26>

00002084 <.L28>:
            }
            else {
                springForce = 40*OCRvalue;
    2084:	de 00 90    	mov.w     [w14+10], w1
    2086:	80 02 20    	mov.w     #0x28, w0
    2088:	00 88 b9    	mul.ss    w1, w0, w0
    208a:	00 00 78    	mov.w     w0, w0
    208c:	10 07 98    	mov.w     w0, [w14+2]

0000208e <.L26>:
            }

            if (distance < -50) { //make pin7 = 0
    208e:	e0 fc 2f    	mov.w     #0xffce, w0
    2090:	9e 00 78    	mov.w     [w14], w1
    2092:	80 8f 50    	sub.w     w1, w0, [w15]
    2094:	06 00 3d    	bra       GE, 0x20a2 <.L29>
                OC2R = springForce;
    2096:	9e 00 90    	mov.w     [w14+2], w1
    2098:	01 0d 88    	mov.w     w1, 0x1a0
                OC1R = 0;
    209a:	96 21 ef    	clr.w     0x196
                motorValue = springForce;
    209c:	1e 00 90    	mov.w     [w14+2], w0
    209e:	10 41 88    	mov.w     w0, 0x822
    20a0:	0d 00 37    	bra       0x20bc <.L30>

000020a2 <.L29>:
            }
            else if (distance > 50) { // distance < 0, so pin8 = 0
    20a2:	20 03 20    	mov.w     #0x32, w0
    20a4:	9e 00 78    	mov.w     [w14], w1
    20a6:	80 8f 50    	sub.w     w1, w0, [w15]
    20a8:	06 00 34    	bra       LE, 0x20b6 <.L31>
                OC1R = springForce;
    20aa:	9e 00 90    	mov.w     [w14+2], w1
    20ac:	b1 0c 88    	mov.w     w1, 0x196
                OC2R = 0;
    20ae:	a0 21 ef    	clr.w     0x1a0
                motorValue = springForce;  
    20b0:	1e 00 90    	mov.w     [w14+2], w0
    20b2:	10 41 88    	mov.w     w0, 0x822
    20b4:	03 00 37    	bra       0x20bc <.L30>

000020b6 <.L31>:
            }
            else { //the dead zone
                OC1R = 0;
    20b6:	96 21 ef    	clr.w     0x196
                OC2R = 0;
    20b8:	a0 21 ef    	clr.w     0x1a0
                motorValue = 0; 
    20ba:	22 28 ef    	clr.w     0x822

000020bc <.L30>:
            }
            distance = 24576 - currentEncValue;
    20bc:	d0 40 80    	mov.w     0x81a, w0
    20be:	01 00 26    	mov.w     #0x6000, w1
    20c0:	00 80 50    	sub.w     w1, w0, w0
    20c2:	00 0f 78    	mov.w     w0, [w14]
    20c4:	f7 00 37    	bra       0x22b4 <.L32>

000020c6 <.L24>:
        }
        else if (mode == 1) { // virtual damper
    20c6:	00 41 80    	mov.w     0x820, w0
    20c8:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    20ca:	28 00 3a    	bra       NZ, 0x211c <.L33>
            if (currentEncValue > (previousEncValueWrap + 1)) { //make pin7 = 0
    20cc:	f0 40 80    	mov.w     0x81e, w0
    20ce:	80 00 e8    	inc.w     w0, w1
    20d0:	d0 40 80    	mov.w     0x81a, w0
    20d2:	80 8f 50    	sub.w     w1, w0, [w15]
    20d4:	0d 00 31    	bra       C, 0x20f0 <.L34>
                OC2R = 6*(currentEncValue - previousEncValueWrap)*OCRvalue;
    20d6:	d1 40 80    	mov.w     0x81a, w1
    20d8:	f0 40 80    	mov.w     0x81e, w0
    20da:	80 80 50    	sub.w     w1, w0, w1
    20dc:	5e 00 90    	mov.w     [w14+10], w0
    20de:	00 88 b9    	mul.ss    w1, w0, w0
    20e0:	00 00 78    	mov.w     w0, w0
    20e2:	66 00 b9    	mul.su    w0, #0x6, w0
    20e4:	00 00 78    	mov.w     w0, w0
    20e6:	00 0d 88    	mov.w     w0, 0x1a0
                OC1R = 0;
    20e8:	96 21 ef    	clr.w     0x196
                motorValue = OC2R;
    20ea:	00 0d 80    	mov.w     0x1a0, w0
    20ec:	10 41 88    	mov.w     w0, 0x822
    20ee:	e2 00 37    	bra       0x22b4 <.L32>

000020f0 <.L34>:
            }
            else if (currentEncValue < (previousEncValueWrap - 1)) { // distance < 0, so pin8 = 0
    20f0:	f0 40 80    	mov.w     0x81e, w0
    20f2:	80 00 e9    	dec.w     w0, w1
    20f4:	d0 40 80    	mov.w     0x81a, w0
    20f6:	80 8f 50    	sub.w     w1, w0, [w15]
    20f8:	0d 00 36    	bra       LEU, 0x2114 <.L35>
                OC1R = 6*(previousEncValueWrap - currentEncValue)*OCRvalue;
    20fa:	f1 40 80    	mov.w     0x81e, w1
    20fc:	d0 40 80    	mov.w     0x81a, w0
    20fe:	80 80 50    	sub.w     w1, w0, w1
    2100:	5e 00 90    	mov.w     [w14+10], w0
    2102:	00 88 b9    	mul.ss    w1, w0, w0
    2104:	00 00 78    	mov.w     w0, w0
    2106:	66 00 b9    	mul.su    w0, #0x6, w0
    2108:	00 00 78    	mov.w     w0, w0
    210a:	b0 0c 88    	mov.w     w0, 0x196
                OC2R = 0; 
    210c:	a0 21 ef    	clr.w     0x1a0
                motorValue = OC1R; 
    210e:	b0 0c 80    	mov.w     0x196, w0
    2110:	10 41 88    	mov.w     w0, 0x822
    2112:	d0 00 37    	bra       0x22b4 <.L32>

00002114 <.L35>:
            }
            else { //the dead zone
                OC1R = 0;
    2114:	96 21 ef    	clr.w     0x196
                OC2R = 0; 
    2116:	a0 21 ef    	clr.w     0x1a0
                motorValue = 0; 
    2118:	22 28 ef    	clr.w     0x822
    211a:	cc 00 37    	bra       0x22b4 <.L32>

0000211c <.L33>:
            }
        }
        else if (mode == 2){ //texture 
    211c:	00 41 80    	mov.w     0x820, w0
    211e:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    2120:	8c 00 3a    	bra       NZ, 0x223a <.L36> <.LBE2>

00002122 <.LBB2>:
            int i;
            if (randPositions[0] == -1) { // random positions are not set
    2122:	3e 08 90    	mov.w     [w14+22], w0
    2124:	e1 0f 40    	add.w     w0, #0x1, [w15]
    2126:	16 00 3a    	bra       NZ, 0x2154 <.L37>
                for (i = 0; i < 15; i = i + 1){
    2128:	00 00 eb    	clr.w     w0
    212a:	20 07 98    	mov.w     w0, [w14+4]
    212c:	0f 00 37    	bra       0x214c <.L38>

0000212e <.L39>:
                    randPositions[i] = rand() % 49100;
    212e:	9b f8 07    	rcall     0x1266 <_rand>
    2130:	cf 80 de    	asr.w     w0, #0xf, w1
    2132:	c2 fc 2b    	mov.w     #0xbfcc, w2
    2134:	03 00 20    	mov.w     #0x0, w3
    2136:	75 f8 07    	rcall     0x1222 <___modsi3>
    2138:	80 00 78    	mov.w     w0, w1
    213a:	2e 00 90    	mov.w     [w14+4], w0
    213c:	00 00 40    	add.w     w0, w0, w0
    213e:	00 00 47    	add.w     w14, w0, w0
    2140:	76 00 40    	add.w     w0, #0x16, w0
    2142:	01 08 78    	mov.w     w1, [w0]
                    LED1 = 1; 
    2144:	da e2 a8    	bset.b    0x2da, #0x7
    2146:	2e 00 90    	mov.w     [w14+4], w0
    2148:	00 00 e8    	inc.w     w0, w0
    214a:	20 07 98    	mov.w     w0, [w14+4]

0000214c <.L38>:
    214c:	2e 00 90    	mov.w     [w14+4], w0
    214e:	ee 0f 50    	sub.w     w0, #0xe, [w15]
    2150:	ee ff 34    	bra       LE, 0x212e <.L39>
                }
            }
            else {
                for (i = 0; i < 15; i = i + 1){
    2152:	b0 00 37    	bra       0x22b4 <.L32>

00002154 <.L37>:
    2154:	00 00 eb    	clr.w     w0
    2156:	20 07 98    	mov.w     w0, [w14+4]
    2158:	6c 00 37    	bra       0x2232 <.L41>

0000215a <.L50>:
                    if (randPositions[i] > currentEncValue) {
    215a:	2e 00 90    	mov.w     [w14+4], w0
    215c:	00 00 40    	add.w     w0, w0, w0
    215e:	00 00 47    	add.w     w14, w0, w0
    2160:	b0 08 90    	mov.w     [w0+22], w1
    2162:	d0 40 80    	mov.w     0x81a, w0
    2164:	80 8f 50    	sub.w     w1, w0, [w15]
    2166:	2d 00 36    	bra       LEU, 0x21c2 <.L42>
                        if (randPositions[i] - currentEncValue < 500){
    2168:	2e 00 90    	mov.w     [w14+4], w0
    216a:	00 00 40    	add.w     w0, w0, w0
    216c:	00 00 47    	add.w     w14, w0, w0
    216e:	b0 08 90    	mov.w     [w0+22], w1
    2170:	d0 40 80    	mov.w     0x81a, w0
    2172:	80 80 50    	sub.w     w1, w0, w1
    2174:	30 1f 20    	mov.w     #0x1f3, w0
    2176:	80 8f 50    	sub.w     w1, w0, [w15]
    2178:	21 00 3e    	bra       GTU, 0x21bc <.L43>
                            if ((randPositions[i]%2) == 0){
    217a:	2e 00 90    	mov.w     [w14+4], w0
    217c:	00 00 40    	add.w     w0, w0, w0
    217e:	00 00 47    	add.w     w14, w0, w0
    2180:	30 08 90    	mov.w     [w0+22], w0
    2182:	61 00 60    	and.w     w0, #0x1, w0
    2184:	00 00 e0    	cp0.w     w0
    2186:	09 00 3a    	bra       NZ, 0x219a <.L44>
                                OC1R = 50*OCRvalue;
    2188:	de 00 90    	mov.w     [w14+10], w1
    218a:	20 03 20    	mov.w     #0x32, w0
    218c:	00 88 b9    	mul.ss    w1, w0, w0
    218e:	00 00 78    	mov.w     w0, w0
    2190:	b0 0c 88    	mov.w     w0, 0x196
                                OC2R = 0; 
    2192:	a0 21 ef    	clr.w     0x1a0
                                motorValue = OC1R; 
    2194:	b0 0c 80    	mov.w     0x196, w0
    2196:	10 41 88    	mov.w     w0, 0x822
                            }   
                            else if ((randPositions[i]%2) == 1){
                                OC2R = 50*OCRvalue;
                                OC1R = 0; 
                                motorValue = OC2R; 
                            }
                        break;
    2198:	8d 00 37    	bra       0x22b4 <.L32>

0000219a <.L44>:
    219a:	2e 00 90    	mov.w     [w14+4], w0
    219c:	00 00 40    	add.w     w0, w0, w0
    219e:	00 00 47    	add.w     w14, w0, w0
    21a0:	30 08 90    	mov.w     [w0+22], w0
    21a2:	61 00 60    	and.w     w0, #0x1, w0
    21a4:	00 40 78    	mov.b     w0, w0
    21a6:	00 04 e0    	cp0.b     w0
    21a8:	82 00 32    	bra       Z, 0x22ae <.L56>
    21aa:	de 00 90    	mov.w     [w14+10], w1
    21ac:	20 03 20    	mov.w     #0x32, w0
    21ae:	00 88 b9    	mul.ss    w1, w0, w0
    21b0:	00 00 78    	mov.w     w0, w0
    21b2:	00 0d 88    	mov.w     w0, 0x1a0
    21b4:	96 21 ef    	clr.w     0x196
    21b6:	00 0d 80    	mov.w     0x1a0, w0
    21b8:	10 41 88    	mov.w     w0, 0x822
    21ba:	7c 00 37    	bra       0x22b4 <.L32>

000021bc <.L43>:
                        }
                        else{
                            OC1R = 0;
    21bc:	96 21 ef    	clr.w     0x196
                            OC2R = 0;
    21be:	a0 21 ef    	clr.w     0x1a0
                            motorValue = 0; 
    21c0:	22 28 ef    	clr.w     0x822

000021c2 <.L42>:
                        }

                    }
                    if (randPositions[i] < currentEncValue) {
    21c2:	2e 00 90    	mov.w     [w14+4], w0
    21c4:	00 00 40    	add.w     w0, w0, w0
    21c6:	00 00 47    	add.w     w14, w0, w0
    21c8:	b0 08 90    	mov.w     [w0+22], w1
    21ca:	d0 40 80    	mov.w     0x81a, w0
    21cc:	80 8f 50    	sub.w     w1, w0, [w15]
    21ce:	2e 00 31    	bra       C, 0x222c <.L46>
                        if (currentEncValue  - randPositions[i] < 500){
    21d0:	d1 40 80    	mov.w     0x81a, w1
    21d2:	2e 00 90    	mov.w     [w14+4], w0
    21d4:	00 00 40    	add.w     w0, w0, w0
    21d6:	00 00 47    	add.w     w14, w0, w0
    21d8:	30 08 90    	mov.w     [w0+22], w0
    21da:	80 80 50    	sub.w     w1, w0, w1
    21dc:	30 1f 20    	mov.w     #0x1f3, w0
    21de:	80 8f 50    	sub.w     w1, w0, [w15]
    21e0:	22 00 3e    	bra       GTU, 0x2226 <.L47>
                            if ((randPositions[i]%2) == 0){
    21e2:	2e 00 90    	mov.w     [w14+4], w0
    21e4:	00 00 40    	add.w     w0, w0, w0
    21e6:	00 00 47    	add.w     w14, w0, w0
    21e8:	30 08 90    	mov.w     [w0+22], w0
    21ea:	61 00 60    	and.w     w0, #0x1, w0
    21ec:	00 00 e0    	cp0.w     w0
    21ee:	09 00 3a    	bra       NZ, 0x2202 <.L48>
                                OC1R = 50*OCRvalue;
    21f0:	de 00 90    	mov.w     [w14+10], w1
    21f2:	20 03 20    	mov.w     #0x32, w0
    21f4:	00 88 b9    	mul.ss    w1, w0, w0
    21f6:	00 00 78    	mov.w     w0, w0
    21f8:	b0 0c 88    	mov.w     w0, 0x196
                                OC2R = 0; 
    21fa:	a0 21 ef    	clr.w     0x1a0
                                motorValue = OC1R;
    21fc:	b0 0c 80    	mov.w     0x196, w0
    21fe:	10 41 88    	mov.w     w0, 0x822
                            }   
                            else if ((randPositions[i]%2) == 1){
                                OC2R = 50*OCRvalue;
                                OC1R = 0; 
                                motorValue = -1*OC2R; 
                            }
                        break;
    2200:	59 00 37    	bra       0x22b4 <.L32>

00002202 <.L48>:
    2202:	2e 00 90    	mov.w     [w14+4], w0
    2204:	00 00 40    	add.w     w0, w0, w0
    2206:	00 00 47    	add.w     w14, w0, w0
    2208:	30 08 90    	mov.w     [w0+22], w0
    220a:	61 00 60    	and.w     w0, #0x1, w0
    220c:	00 40 78    	mov.b     w0, w0
    220e:	00 04 e0    	cp0.b     w0
    2210:	50 00 32    	bra       Z, 0x22b2 <.L57>
    2212:	de 00 90    	mov.w     [w14+10], w1
    2214:	20 03 20    	mov.w     #0x32, w0
    2216:	00 88 b9    	mul.ss    w1, w0, w0
    2218:	00 00 78    	mov.w     w0, w0
    221a:	00 0d 88    	mov.w     w0, 0x1a0
    221c:	96 21 ef    	clr.w     0x196
    221e:	00 0d 80    	mov.w     0x1a0, w0
    2220:	00 00 ea    	neg.w     w0, w0
    2222:	10 41 88    	mov.w     w0, 0x822
    2224:	47 00 37    	bra       0x22b4 <.L32>

00002226 <.L47>:
                        }
                        else{
                            OC1R = 0;
    2226:	96 21 ef    	clr.w     0x196
                            OC2R = 0;
    2228:	a0 21 ef    	clr.w     0x1a0
                            motorValue = 0; 
    222a:	22 28 ef    	clr.w     0x822

0000222c <.L46>:
    222c:	2e 00 90    	mov.w     [w14+4], w0
    222e:	00 00 e8    	inc.w     w0, w0
    2230:	20 07 98    	mov.w     w0, [w14+4]

00002232 <.L41>:
    2232:	2e 00 90    	mov.w     [w14+4], w0
    2234:	ee 0f 50    	sub.w     w0, #0xe, [w15]
    2236:	91 ff 34    	bra       LE, 0x215a <.L50>
    2238:	3d 00 37    	bra       0x22b4 <.L32>

0000223a <.L36>:
                        }
                    }
                }
            }      
        }
        else if (mode == 3) { // wall mode
    223a:	00 41 80    	mov.w     0x820, w0
    223c:	e3 0f 50    	sub.w     w0, #0x3, [w15]
    223e:	30 00 3a    	bra       NZ, 0x22a0 <.L51>
            if (currentEncValue > wallPosition) {
    2240:	d1 40 80    	mov.w     0x81a, w1
    2242:	7e 00 90    	mov.w     [w14+14], w0
    2244:	80 8f 50    	sub.w     w1, w0, [w15]
    2246:	13 00 36    	bra       LEU, 0x226e <.L52>
                if (currentEncValue - wallPosition < 3000){
    2248:	d1 40 80    	mov.w     0x81a, w1
    224a:	7e 00 90    	mov.w     [w14+14], w0
    224c:	80 80 50    	sub.w     w1, w0, w1
    224e:	70 bb 20    	mov.w     #0xbb7, w0
    2250:	80 8f 50    	sub.w     w1, w0, [w15]
    2252:	09 00 3e    	bra       GTU, 0x2266 <.L53>
                    OC1R = 50*OCRvalue;
    2254:	de 00 90    	mov.w     [w14+10], w1
    2256:	20 03 20    	mov.w     #0x32, w0
    2258:	00 88 b9    	mul.ss    w1, w0, w0
    225a:	00 00 78    	mov.w     w0, w0
    225c:	b0 0c 88    	mov.w     w0, 0x196
                    OC2R = 0; 
    225e:	a0 21 ef    	clr.w     0x1a0
                    motorValue = OC1R; 
    2260:	b0 0c 80    	mov.w     0x196, w0
    2262:	10 41 88    	mov.w     w0, 0x822
    2264:	27 00 37    	bra       0x22b4 <.L32>

00002266 <.L53>:
                }
                else{
                    OC1R = 0;
    2266:	96 21 ef    	clr.w     0x196
                    OC2R = 0;
    2268:	a0 21 ef    	clr.w     0x1a0
                    motorValue = 0; 
    226a:	22 28 ef    	clr.w     0x822
    226c:	23 00 37    	bra       0x22b4 <.L32>

0000226e <.L52>:
                }
            }
            else if (currentEncValue < wallPosition ){
    226e:	d1 40 80    	mov.w     0x81a, w1
    2270:	7e 00 90    	mov.w     [w14+14], w0
    2272:	80 8f 50    	sub.w     w1, w0, [w15]
    2274:	1f 00 31    	bra       C, 0x22b4 <.L32>
                if (wallPosition - currentEncValue < 3000){
    2276:	d0 40 80    	mov.w     0x81a, w0
    2278:	fe 00 90    	mov.w     [w14+14], w1
    227a:	80 80 50    	sub.w     w1, w0, w1
    227c:	70 bb 20    	mov.w     #0xbb7, w0
    227e:	80 8f 50    	sub.w     w1, w0, [w15]
    2280:	0b 00 3e    	bra       GTU, 0x2298 <.L54>
                    OC2R = 50*OCRvalue;
    2282:	de 00 90    	mov.w     [w14+10], w1
    2284:	20 03 20    	mov.w     #0x32, w0
    2286:	00 88 b9    	mul.ss    w1, w0, w0
    2288:	00 00 78    	mov.w     w0, w0
    228a:	00 0d 88    	mov.w     w0, 0x1a0
                    OC1R = 0; 
    228c:	96 21 ef    	clr.w     0x196
                    LED1 = 1;
    228e:	da e2 a8    	bset.b    0x2da, #0x7
                    motorValue = -1*OC2R; 
    2290:	00 0d 80    	mov.w     0x1a0, w0
    2292:	00 00 ea    	neg.w     w0, w0
    2294:	10 41 88    	mov.w     w0, 0x822
    2296:	0e 00 37    	bra       0x22b4 <.L32>

00002298 <.L54>:
                }
                else{
                    OC1R = 0;
    2298:	96 21 ef    	clr.w     0x196
                    OC2R = 0;
    229a:	a0 21 ef    	clr.w     0x1a0
                    motorValue = 0; 
    229c:	22 28 ef    	clr.w     0x822
    229e:	0a 00 37    	bra       0x22b4 <.L32>

000022a0 <.L51>:
                }
            }
        }
        else if (mode == 4){
    22a0:	00 41 80    	mov.w     0x820, w0
    22a2:	e4 0f 50    	sub.w     w0, #0x4, [w15]
    22a4:	07 00 3a    	bra       NZ, 0x22b4 <.L32>
            OC1R = 0;
    22a6:	96 21 ef    	clr.w     0x196
            OC2R = 0;
    22a8:	a0 21 ef    	clr.w     0x1a0
            motorValue = 0; 
    22aa:	22 28 ef    	clr.w     0x822
    22ac:	03 00 37    	bra       0x22b4 <.L32>

000022ae <.L56>:
    22ae:	00 00 00    	nop       
    22b0:	01 00 37    	bra       0x22b4 <.L32>

000022b2 <.L57>:
    22b2:	00 00 00    	nop       

000022b4 <.L32>:
        }
        #ifndef USB_INTERRUPT
            usb_service();
    22b4:	c1 f8 07    	rcall     0x1438 <_usb_service> <.LFB3> <.LFE2>
        #endif
        previousEncValue = badCurrentEncValue;
    22b6:	21 41 80    	mov.w     0x824, w1
    22b8:	11 0f 98    	mov.w     w1, [w14+18]
        previousEncValueWrap = currentEncValue; 
    22ba:	d0 40 80    	mov.w     0x81a, w0
    22bc:	f0 40 88    	mov.w     w0, 0x81e
    }
    22be:	70 fe 37    	bra       0x1fa0 <.L55>

000022c0 <_init_elecanisms>:
*/

#include "elecanisms.h"

void init_elecanisms(void) {
    22c0:	00 00 fa    	lnk       #0x0
    CLKDIV = 0x0100;        // RCDIV = 001 (4MHz, div2), 
    22c2:	00 10 20    	mov.w     #0x100, w0
    22c4:	20 3a 88    	mov.w     w0, 0x744
                            // CPDIV = 00 (FOSC = 32MHz, FCY = 16MHz)

    // Configure all pins on the digital headers to be inputs
    D0_DIR = IN;
    22c6:	d8 a2 a8    	bset.b    0x2d8, #0x5
    D1_DIR = IN;
    22c8:	d8 82 a8    	bset.b    0x2d8, #0x4
    D2_DIR = IN;
    22ca:	e8 82 a8    	bset.b    0x2e8, #0x4
    D3_DIR = IN;
    22cc:	e8 a2 a8    	bset.b    0x2e8, #0x5
    D4_DIR = IN;
    22ce:	c9 e2 a8    	bset.b    0x2c9, #0x7
    D5_DIR = IN;
    22d0:	e8 62 a8    	bset.b    0x2e8, #0x3
    D6_DIR = IN;
    22d2:	d9 02 a8    	bset.b    0x2d9, #0x0
    D7_DIR = IN;
    22d4:	d9 62 a8    	bset.b    0x2d9, #0x3
    D8_DIR = IN;
    22d6:	d9 22 a8    	bset.b    0x2d9, #0x1
    D9_DIR = IN;
    22d8:	d9 42 a8    	bset.b    0x2d9, #0x2
    D10_DIR = IN;
    22da:	d8 02 a8    	bset.b    0x2d8, #0x0
    D11_DIR = IN;
    22dc:	d8 22 a8    	bset.b    0x2d8, #0x1
    D12_DIR = IN;
    22de:	d8 42 a8    	bset.b    0x2d8, #0x2
    D13_DIR = IN;
    22e0:	d8 62 a8    	bset.b    0x2d8, #0x3

    // Configure all pins on the analog header to be inputs
    A0_DIR = IN;
    22e2:	c8 a2 a8    	bset.b    0x2c8, #0x5
    A1_DIR = IN;
    22e4:	c8 82 a8    	bset.b    0x2c8, #0x4
    A2_DIR = IN;
    22e6:	c8 62 a8    	bset.b    0x2c8, #0x3
    A3_DIR = IN;
    22e8:	c8 42 a8    	bset.b    0x2c8, #0x2
    A4_DIR = IN;
    22ea:	c8 22 a8    	bset.b    0x2c8, #0x1
    A5_DIR = IN;
    22ec:	c8 02 a8    	bset.b    0x2c8, #0x0

    // Make all pins digital I/Os except for A0,...,A5
    ANSB = 0x003F;
    22ee:	f0 03 20    	mov.w     #0x3f, w0
    22f0:	10 27 88    	mov.w     w0, 0x4e2
    ANSC = 0;
    22f2:	e4 24 ef    	clr.w     0x4e4
    ANSD = 0;
    22f4:	e6 24 ef    	clr.w     0x4e6
    ANSF = 0;
    22f6:	ea 24 ef    	clr.w     0x4ea
    ANSG = 0;
    22f8:	ec 24 ef    	clr.w     0x4ec

    // Configure and enable the ADC module: 
    //   set output data format to integer (FORM<1:0> = 0b00)
    //   set conversion trigger source select bits to internal counter 
    //     (SSRC<2:0> = 0b111)
    //   set auto-sample time bits to 12*TAD (SAMC<4:0> = 12)
    //   set conversion clock select bits to 64*TCY (ADCS<7:0> = 64)
    //   set initial channel selection to A0
    AD1CON1 = 0x00E0; 
    22fa:	00 0e 20    	mov.w     #0xe0, w0
    22fc:	00 19 88    	mov.w     w0, 0x320
    AD1CON2 = 0;
    22fe:	22 23 ef    	clr.w     0x322
    AD1CON3 = 0x0C40;
    2300:	00 c4 20    	mov.w     #0xc40, w0
    2302:	20 19 88    	mov.w     w0, 0x324
    AD1CHS = A0_AN;
    2304:	50 00 20    	mov.w     #0x5, w0
    2306:	40 19 88    	mov.w     w0, 0x328
    AD1CON1bits.ADON = 1;
    2308:	21 e3 a8    	bset.b    0x321, #0x7

    // Configure LED pins as outputs, set to low (off)
    LED1_DIR = OUT; LED1 = 0;
    230a:	d8 e2 a9    	bclr.b    0x2d8, #0x7
    230c:	da e2 a9    	bclr.b    0x2da, #0x7
    LED2_DIR = OUT; LED2 = 0;
    230e:	e8 02 a9    	bclr.b    0x2e8, #0x0
    2310:	ea 02 a9    	bclr.b    0x2ea, #0x0
    LED3_DIR = OUT; LED3 = 0;
    2312:	e8 22 a9    	bclr.b    0x2e8, #0x1
    2314:	ea 22 a9    	bclr.b    0x2ea, #0x1

    // Configure SW pins as inputs
    SW1_DIR = IN;
    2316:	d1 e2 a8    	bset.b    0x2d1, #0x7
    SW2_DIR = IN;
    2318:	d1 82 a8    	bset.b    0x2d1, #0x4
    SW3_DIR = IN;
    231a:	c9 82 a8    	bset.b    0x2c9, #0x4
}
    231c:	00 80 fa    	ulnk      
    231e:	00 00 06    	return    

00002320 <_read_analog>:

uint16_t read_analog(uint16_t pin_an) {
    2320:	02 00 fa    	lnk       #0x2
    2322:	00 0f 78    	mov.w     w0, [w14]
    AD1CHS = pin_an;
    2324:	9e 00 78    	mov.w     [w14], w1
    2326:	41 19 88    	mov.w     w1, 0x328
    AD1CON1bits.SAMP = 1;
    2328:	20 23 a8    	bset.b    0x320, #0x1
    while (AD1CON1bits.DONE == 0) {}
    232a:	00 00 00    	nop       

0000232c <.L3>:
    232c:	00 19 80    	mov.w     0x320, w0
    232e:	61 00 60    	and.w     w0, #0x1, w0
    2330:	00 00 e0    	cp0.w     w0
    2332:	fc ff 32    	bra       Z, 0x232c <.L3>
    return ADC1BUF0;
    2334:	00 18 80    	mov.w     0x300, w0
}
    2336:	00 80 fa    	ulnk      
    2338:	00 00 06    	return    
Disassembly of section .dinit:

0000233a <.dinit>:
    233a:	1a 08 00    	nop       
    233c:	0e 00 00    	nop       
    233e:	80 00 00    	nop       
    2340:	b2 08 00    	nop       
    2342:	ce 00 00    	nop       
    2344:	80 00 00    	nop       
    2346:	00 0a 00    	nop       
    2348:	80 00 00    	nop       
    234a:	80 00 00    	nop       
    234c:	00 08 00    	nop       
    234e:	1a 00 00    	nop       
    2350:	80 00 00    	nop       
    2352:	80 09 00    	nop       
    2354:	04 00 00    	nop       
    2356:	82 00 00    	nop       
    2358:	01 00 00    	nop       
    235a:	00 00 00    	nop       
    235c:	28 08 00    	nop       
    235e:	8a 00 00    	nop       
    2360:	80 00 00    	nop       
    2362:	00 00 00    	nop       
Disassembly of section .isr:

00002364 <__DefaultInterrupt>:
    2364:	00 40 da    	break     
    2366:	00 00 fe    	reset     
